{"ast":null,"code":"/*!\n * body-parser\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nvar createError = require('http-errors');\nvar debug = require('debug')('body-parser:json');\nvar isFinished = require('on-finished').isFinished;\nvar read = require('../read');\nvar typeis = require('type-is');\nvar {\n  getCharset,\n  normalizeOptions\n} = require('../utils');\n\n/**\n * Module exports.\n */\n\nmodule.exports = json;\n\n/**\n * RegExp to match the first non-space in a string.\n *\n * Allowed whitespace is defined in RFC 7159:\n *\n *    ws = *(\n *            %x20 /              ; Space\n *            %x09 /              ; Horizontal tab\n *            %x0A /              ; Line feed or New line\n *            %x0D )              ; Carriage return\n */\n\nvar FIRST_CHAR_REGEXP = /^[\\x20\\x09\\x0a\\x0d]*([^\\x20\\x09\\x0a\\x0d])/; // eslint-disable-line no-control-regex\n\nvar JSON_SYNTAX_CHAR = '#';\nvar JSON_SYNTAX_REGEXP = /#+/g;\n\n/**\n * Create a middleware to parse JSON bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @public\n */\n\nfunction json(options) {\n  var {\n    inflate,\n    limit,\n    verify,\n    shouldParse\n  } = normalizeOptions(options, 'application/json');\n  var reviver = options?.reviver;\n  var strict = options?.strict !== false;\n  function parse(body) {\n    if (body.length === 0) {\n      // special-case empty json body, as it's a common client-side mistake\n      // TODO: maybe make this configurable or part of \"strict\" option\n      return {};\n    }\n    if (strict) {\n      var first = firstchar(body);\n      if (first !== '{' && first !== '[') {\n        debug('strict violation');\n        throw createStrictSyntaxError(body, first);\n      }\n    }\n    try {\n      debug('parse json');\n      return JSON.parse(body, reviver);\n    } catch (e) {\n      throw normalizeJsonSyntaxError(e, {\n        message: e.message,\n        stack: e.stack\n      });\n    }\n  }\n  return function jsonParser(req, res, next) {\n    if (isFinished(req)) {\n      debug('body already parsed');\n      next();\n      return;\n    }\n    if (!('body' in req)) {\n      req.body = undefined;\n    }\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body');\n      next();\n      return;\n    }\n    debug('content-type %j', req.headers['content-type']);\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing');\n      next();\n      return;\n    }\n\n    // assert charset per RFC 7159 sec 8.1\n    var charset = getCharset(req) || 'utf-8';\n    if (charset.slice(0, 4) !== 'utf-') {\n      debug('invalid charset');\n      next(createError(415, 'unsupported charset \"' + charset.toUpperCase() + '\"', {\n        charset: charset,\n        type: 'charset.unsupported'\n      }));\n      return;\n    }\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: charset,\n      inflate,\n      limit,\n      verify\n    });\n  };\n}\n\n/**\n * Create strict violation syntax error matching native error.\n *\n * @param {string} str\n * @param {string} char\n * @return {Error}\n * @private\n */\n\nfunction createStrictSyntaxError(str, char) {\n  var index = str.indexOf(char);\n  var partial = '';\n  if (index !== -1) {\n    partial = str.substring(0, index) + JSON_SYNTAX_CHAR;\n    for (var i = index + 1; i < str.length; i++) {\n      partial += JSON_SYNTAX_CHAR;\n    }\n  }\n  try {\n    JSON.parse(partial); /* istanbul ignore next */\n    throw new SyntaxError('strict violation');\n  } catch (e) {\n    return normalizeJsonSyntaxError(e, {\n      message: e.message.replace(JSON_SYNTAX_REGEXP, function (placeholder) {\n        return str.substring(index, index + placeholder.length);\n      }),\n      stack: e.stack\n    });\n  }\n}\n\n/**\n * Get the first non-whitespace character in a string.\n *\n * @param {string} str\n * @return {function}\n * @private\n */\n\nfunction firstchar(str) {\n  var match = FIRST_CHAR_REGEXP.exec(str);\n  return match ? match[1] : undefined;\n}\n\n/**\n * Normalize a SyntaxError for JSON.parse.\n *\n * @param {SyntaxError} error\n * @param {object} obj\n * @return {SyntaxError}\n */\n\nfunction normalizeJsonSyntaxError(error, obj) {\n  var keys = Object.getOwnPropertyNames(error);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (key !== 'stack' && key !== 'message') {\n      delete error[key];\n    }\n  }\n\n  // replace stack before message for Node.js 0.10 and below\n  error.stack = obj.stack.replace(error.message, obj.message);\n  error.message = obj.message;\n  return error;\n}","map":{"version":3,"names":["createError","require","debug","isFinished","read","typeis","getCharset","normalizeOptions","module","exports","json","FIRST_CHAR_REGEXP","JSON_SYNTAX_CHAR","JSON_SYNTAX_REGEXP","options","inflate","limit","verify","shouldParse","reviver","strict","parse","body","length","first","firstchar","createStrictSyntaxError","JSON","e","normalizeJsonSyntaxError","message","stack","jsonParser","req","res","next","undefined","hasBody","headers","charset","slice","toUpperCase","type","encoding","str","char","index","indexOf","partial","substring","i","SyntaxError","replace","placeholder","match","exec","error","obj","keys","Object","getOwnPropertyNames","key"],"sources":["/Users/linwanjou/Documents/GitHub/SinoPac_Sign_Language/永豐產學/App/node_modules/body-parser/lib/types/json.js"],"sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar createError = require('http-errors')\nvar debug = require('debug')('body-parser:json')\nvar isFinished = require('on-finished').isFinished\nvar read = require('../read')\nvar typeis = require('type-is')\nvar { getCharset, normalizeOptions } = require('../utils')\n\n/**\n * Module exports.\n */\n\nmodule.exports = json\n\n/**\n * RegExp to match the first non-space in a string.\n *\n * Allowed whitespace is defined in RFC 7159:\n *\n *    ws = *(\n *            %x20 /              ; Space\n *            %x09 /              ; Horizontal tab\n *            %x0A /              ; Line feed or New line\n *            %x0D )              ; Carriage return\n */\n\nvar FIRST_CHAR_REGEXP = /^[\\x20\\x09\\x0a\\x0d]*([^\\x20\\x09\\x0a\\x0d])/ // eslint-disable-line no-control-regex\n\nvar JSON_SYNTAX_CHAR = '#'\nvar JSON_SYNTAX_REGEXP = /#+/g\n\n/**\n * Create a middleware to parse JSON bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @public\n */\n\nfunction json (options) {\n  var { inflate, limit, verify, shouldParse } = normalizeOptions(options, 'application/json')\n\n  var reviver = options?.reviver\n  var strict = options?.strict !== false\n\n  function parse (body) {\n    if (body.length === 0) {\n      // special-case empty json body, as it's a common client-side mistake\n      // TODO: maybe make this configurable or part of \"strict\" option\n      return {}\n    }\n\n    if (strict) {\n      var first = firstchar(body)\n\n      if (first !== '{' && first !== '[') {\n        debug('strict violation')\n        throw createStrictSyntaxError(body, first)\n      }\n    }\n\n    try {\n      debug('parse json')\n      return JSON.parse(body, reviver)\n    } catch (e) {\n      throw normalizeJsonSyntaxError(e, {\n        message: e.message,\n        stack: e.stack\n      })\n    }\n  }\n\n  return function jsonParser (req, res, next) {\n    if (isFinished(req)) {\n      debug('body already parsed')\n      next()\n      return\n    }\n\n    if (!('body' in req)) {\n      req.body = undefined\n    }\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body')\n      next()\n      return\n    }\n\n    debug('content-type %j', req.headers['content-type'])\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing')\n      next()\n      return\n    }\n\n    // assert charset per RFC 7159 sec 8.1\n    var charset = getCharset(req) || 'utf-8'\n    if (charset.slice(0, 4) !== 'utf-') {\n      debug('invalid charset')\n      next(createError(415, 'unsupported charset \"' + charset.toUpperCase() + '\"', {\n        charset: charset,\n        type: 'charset.unsupported'\n      }))\n      return\n    }\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: charset,\n      inflate,\n      limit,\n      verify\n    })\n  }\n}\n\n/**\n * Create strict violation syntax error matching native error.\n *\n * @param {string} str\n * @param {string} char\n * @return {Error}\n * @private\n */\n\nfunction createStrictSyntaxError (str, char) {\n  var index = str.indexOf(char)\n  var partial = ''\n\n  if (index !== -1) {\n    partial = str.substring(0, index) + JSON_SYNTAX_CHAR\n\n    for (var i = index + 1; i < str.length; i++) {\n      partial += JSON_SYNTAX_CHAR\n    }\n  }\n\n  try {\n    JSON.parse(partial); /* istanbul ignore next */ throw new SyntaxError('strict violation')\n  } catch (e) {\n    return normalizeJsonSyntaxError(e, {\n      message: e.message.replace(JSON_SYNTAX_REGEXP, function (placeholder) {\n        return str.substring(index, index + placeholder.length)\n      }),\n      stack: e.stack\n    })\n  }\n}\n\n/**\n * Get the first non-whitespace character in a string.\n *\n * @param {string} str\n * @return {function}\n * @private\n */\n\nfunction firstchar (str) {\n  var match = FIRST_CHAR_REGEXP.exec(str)\n\n  return match\n    ? match[1]\n    : undefined\n}\n\n/**\n * Normalize a SyntaxError for JSON.parse.\n *\n * @param {SyntaxError} error\n * @param {object} obj\n * @return {SyntaxError}\n */\n\nfunction normalizeJsonSyntaxError (error, obj) {\n  var keys = Object.getOwnPropertyNames(error)\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i]\n    if (key !== 'stack' && key !== 'message') {\n      delete error[key]\n    }\n  }\n\n  // replace stack before message for Node.js 0.10 and below\n  error.stack = obj.stack.replace(error.message, obj.message)\n  error.message = obj.message\n\n  return error\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}