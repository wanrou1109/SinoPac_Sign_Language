{"ast":null,"code":"/*!\n * finalhandler\n * Copyright(c) 2014-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nvar debug = require('debug')('finalhandler');\nvar encodeUrl = require('encodeurl');\nvar escapeHtml = require('escape-html');\nvar onFinished = require('on-finished');\nvar parseUrl = require('parseurl');\nvar statuses = require('statuses');\n\n/**\n * Module variables.\n * @private\n */\n\nvar isFinished = onFinished.isFinished;\n\n/**\n * Create a minimal HTML document.\n *\n * @param {string} message\n * @private\n */\n\nfunction createHtmlDocument(message) {\n  var body = escapeHtml(message).replaceAll('\\n', '<br>').replaceAll('  ', ' &nbsp;');\n  return '<!DOCTYPE html>\\n' + '<html lang=\"en\">\\n' + '<head>\\n' + '<meta charset=\"utf-8\">\\n' + '<title>Error</title>\\n' + '</head>\\n' + '<body>\\n' + '<pre>' + body + '</pre>\\n' + '</body>\\n' + '</html>\\n';\n}\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = finalhandler;\n\n/**\n * Create a function to handle the final response.\n *\n * @param {Request} req\n * @param {Response} res\n * @param {Object} [options]\n * @return {Function}\n * @public\n */\n\nfunction finalhandler(req, res, options) {\n  var opts = options || {};\n\n  // get environment\n  var env = opts.env || process.env.NODE_ENV || 'development';\n\n  // get error callback\n  var onerror = opts.onerror;\n  return function (err) {\n    var headers;\n    var msg;\n    var status;\n\n    // ignore 404 on in-flight response\n    if (!err && res.headersSent) {\n      debug('cannot 404 after headers sent');\n      return;\n    }\n\n    // unhandled error\n    if (err) {\n      // respect status code from error\n      status = getErrorStatusCode(err);\n      if (status === undefined) {\n        // fallback to status code on response\n        status = getResponseStatusCode(res);\n      } else {\n        // respect headers from error\n        headers = getErrorHeaders(err);\n      }\n\n      // get error message\n      msg = getErrorMessage(err, status, env);\n    } else {\n      // not found\n      status = 404;\n      msg = 'Cannot ' + req.method + ' ' + encodeUrl(getResourceName(req));\n    }\n    debug('default %s', status);\n\n    // schedule onerror callback\n    if (err && onerror) {\n      setImmediate(onerror, err, req, res);\n    }\n\n    // cannot actually respond\n    if (res.headersSent) {\n      debug('cannot %d after headers sent', status);\n      if (req.socket) {\n        req.socket.destroy();\n      }\n      return;\n    }\n\n    // send response\n    send(req, res, status, headers, msg);\n  };\n}\n\n/**\n * Get headers from Error object.\n *\n * @param {Error} err\n * @return {object}\n * @private\n */\n\nfunction getErrorHeaders(err) {\n  if (!err.headers || typeof err.headers !== 'object') {\n    return undefined;\n  }\n  return {\n    ...err.headers\n  };\n}\n\n/**\n * Get message from Error object, fallback to status message.\n *\n * @param {Error} err\n * @param {number} status\n * @param {string} env\n * @return {string}\n * @private\n */\n\nfunction getErrorMessage(err, status, env) {\n  var msg;\n  if (env !== 'production') {\n    // use err.stack, which typically includes err.message\n    msg = err.stack;\n\n    // fallback to err.toString() when possible\n    if (!msg && typeof err.toString === 'function') {\n      msg = err.toString();\n    }\n  }\n  return msg || statuses.message[status];\n}\n\n/**\n * Get status code from Error object.\n *\n * @param {Error} err\n * @return {number}\n * @private\n */\n\nfunction getErrorStatusCode(err) {\n  // check err.status\n  if (typeof err.status === 'number' && err.status >= 400 && err.status < 600) {\n    return err.status;\n  }\n\n  // check err.statusCode\n  if (typeof err.statusCode === 'number' && err.statusCode >= 400 && err.statusCode < 600) {\n    return err.statusCode;\n  }\n  return undefined;\n}\n\n/**\n * Get resource name for the request.\n *\n * This is typically just the original pathname of the request\n * but will fallback to \"resource\" is that cannot be determined.\n *\n * @param {IncomingMessage} req\n * @return {string}\n * @private\n */\n\nfunction getResourceName(req) {\n  try {\n    return parseUrl.original(req).pathname;\n  } catch (e) {\n    return 'resource';\n  }\n}\n\n/**\n * Get status code from response.\n *\n * @param {OutgoingMessage} res\n * @return {number}\n * @private\n */\n\nfunction getResponseStatusCode(res) {\n  var status = res.statusCode;\n\n  // default status code to 500 if outside valid range\n  if (typeof status !== 'number' || status < 400 || status > 599) {\n    status = 500;\n  }\n  return status;\n}\n\n/**\n * Send response.\n *\n * @param {IncomingMessage} req\n * @param {OutgoingMessage} res\n * @param {number} status\n * @param {object} headers\n * @param {string} message\n * @private\n */\n\nfunction send(req, res, status, headers, message) {\n  function write() {\n    // response body\n    var body = createHtmlDocument(message);\n\n    // response status\n    res.statusCode = status;\n    if (req.httpVersionMajor < 2) {\n      res.statusMessage = statuses.message[status];\n    }\n\n    // remove any content headers\n    res.removeHeader('Content-Encoding');\n    res.removeHeader('Content-Language');\n    res.removeHeader('Content-Range');\n\n    // response headers\n    for (const [key, value] of Object.entries(headers ?? {})) {\n      res.setHeader(key, value);\n    }\n\n    // security headers\n    res.setHeader('Content-Security-Policy', \"default-src 'none'\");\n    res.setHeader('X-Content-Type-Options', 'nosniff');\n\n    // standard headers\n    res.setHeader('Content-Type', 'text/html; charset=utf-8');\n    res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'));\n    if (req.method === 'HEAD') {\n      res.end();\n      return;\n    }\n    res.end(body, 'utf8');\n  }\n  if (isFinished(req)) {\n    write();\n    return;\n  }\n\n  // unpipe everything from the request\n  req.unpipe();\n\n  // flush the request\n  onFinished(req, write);\n  req.resume();\n}","map":{"version":3,"names":["debug","require","encodeUrl","escapeHtml","onFinished","parseUrl","statuses","isFinished","createHtmlDocument","message","body","replaceAll","module","exports","finalhandler","req","res","options","opts","env","process","NODE_ENV","onerror","err","headers","msg","status","headersSent","getErrorStatusCode","undefined","getResponseStatusCode","getErrorHeaders","getErrorMessage","method","getResourceName","setImmediate","socket","destroy","send","stack","toString","statusCode","original","pathname","e","write","httpVersionMajor","statusMessage","removeHeader","key","value","Object","entries","setHeader","Buffer","byteLength","end","unpipe","resume"],"sources":["/Users/linwanjou/Documents/GitHub/SinoPac_Sign_Language/永豐產學/App/node_modules/finalhandler/index.js"],"sourcesContent":["/*!\n * finalhandler\n * Copyright(c) 2014-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar debug = require('debug')('finalhandler')\nvar encodeUrl = require('encodeurl')\nvar escapeHtml = require('escape-html')\nvar onFinished = require('on-finished')\nvar parseUrl = require('parseurl')\nvar statuses = require('statuses')\n\n/**\n * Module variables.\n * @private\n */\n\nvar isFinished = onFinished.isFinished\n\n/**\n * Create a minimal HTML document.\n *\n * @param {string} message\n * @private\n */\n\nfunction createHtmlDocument (message) {\n  var body = escapeHtml(message)\n    .replaceAll('\\n', '<br>')\n    .replaceAll('  ', ' &nbsp;')\n\n  return '<!DOCTYPE html>\\n' +\n    '<html lang=\"en\">\\n' +\n    '<head>\\n' +\n    '<meta charset=\"utf-8\">\\n' +\n    '<title>Error</title>\\n' +\n    '</head>\\n' +\n    '<body>\\n' +\n    '<pre>' + body + '</pre>\\n' +\n    '</body>\\n' +\n    '</html>\\n'\n}\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = finalhandler\n\n/**\n * Create a function to handle the final response.\n *\n * @param {Request} req\n * @param {Response} res\n * @param {Object} [options]\n * @return {Function}\n * @public\n */\n\nfunction finalhandler (req, res, options) {\n  var opts = options || {}\n\n  // get environment\n  var env = opts.env || process.env.NODE_ENV || 'development'\n\n  // get error callback\n  var onerror = opts.onerror\n\n  return function (err) {\n    var headers\n    var msg\n    var status\n\n    // ignore 404 on in-flight response\n    if (!err && res.headersSent) {\n      debug('cannot 404 after headers sent')\n      return\n    }\n\n    // unhandled error\n    if (err) {\n      // respect status code from error\n      status = getErrorStatusCode(err)\n\n      if (status === undefined) {\n        // fallback to status code on response\n        status = getResponseStatusCode(res)\n      } else {\n        // respect headers from error\n        headers = getErrorHeaders(err)\n      }\n\n      // get error message\n      msg = getErrorMessage(err, status, env)\n    } else {\n      // not found\n      status = 404\n      msg = 'Cannot ' + req.method + ' ' + encodeUrl(getResourceName(req))\n    }\n\n    debug('default %s', status)\n\n    // schedule onerror callback\n    if (err && onerror) {\n      setImmediate(onerror, err, req, res)\n    }\n\n    // cannot actually respond\n    if (res.headersSent) {\n      debug('cannot %d after headers sent', status)\n      if (req.socket) {\n        req.socket.destroy()\n      }\n      return\n    }\n\n    // send response\n    send(req, res, status, headers, msg)\n  }\n}\n\n/**\n * Get headers from Error object.\n *\n * @param {Error} err\n * @return {object}\n * @private\n */\n\nfunction getErrorHeaders (err) {\n  if (!err.headers || typeof err.headers !== 'object') {\n    return undefined\n  }\n\n  return { ...err.headers }\n}\n\n/**\n * Get message from Error object, fallback to status message.\n *\n * @param {Error} err\n * @param {number} status\n * @param {string} env\n * @return {string}\n * @private\n */\n\nfunction getErrorMessage (err, status, env) {\n  var msg\n\n  if (env !== 'production') {\n    // use err.stack, which typically includes err.message\n    msg = err.stack\n\n    // fallback to err.toString() when possible\n    if (!msg && typeof err.toString === 'function') {\n      msg = err.toString()\n    }\n  }\n\n  return msg || statuses.message[status]\n}\n\n/**\n * Get status code from Error object.\n *\n * @param {Error} err\n * @return {number}\n * @private\n */\n\nfunction getErrorStatusCode (err) {\n  // check err.status\n  if (typeof err.status === 'number' && err.status >= 400 && err.status < 600) {\n    return err.status\n  }\n\n  // check err.statusCode\n  if (typeof err.statusCode === 'number' && err.statusCode >= 400 && err.statusCode < 600) {\n    return err.statusCode\n  }\n\n  return undefined\n}\n\n/**\n * Get resource name for the request.\n *\n * This is typically just the original pathname of the request\n * but will fallback to \"resource\" is that cannot be determined.\n *\n * @param {IncomingMessage} req\n * @return {string}\n * @private\n */\n\nfunction getResourceName (req) {\n  try {\n    return parseUrl.original(req).pathname\n  } catch (e) {\n    return 'resource'\n  }\n}\n\n/**\n * Get status code from response.\n *\n * @param {OutgoingMessage} res\n * @return {number}\n * @private\n */\n\nfunction getResponseStatusCode (res) {\n  var status = res.statusCode\n\n  // default status code to 500 if outside valid range\n  if (typeof status !== 'number' || status < 400 || status > 599) {\n    status = 500\n  }\n\n  return status\n}\n\n/**\n * Send response.\n *\n * @param {IncomingMessage} req\n * @param {OutgoingMessage} res\n * @param {number} status\n * @param {object} headers\n * @param {string} message\n * @private\n */\n\nfunction send (req, res, status, headers, message) {\n  function write () {\n    // response body\n    var body = createHtmlDocument(message)\n\n    // response status\n    res.statusCode = status\n\n    if (req.httpVersionMajor < 2) {\n      res.statusMessage = statuses.message[status]\n    }\n\n    // remove any content headers\n    res.removeHeader('Content-Encoding')\n    res.removeHeader('Content-Language')\n    res.removeHeader('Content-Range')\n\n    // response headers\n    for (const [key, value] of Object.entries(headers ?? {})) {\n      res.setHeader(key, value)\n    }\n\n    // security headers\n    res.setHeader('Content-Security-Policy', \"default-src 'none'\")\n    res.setHeader('X-Content-Type-Options', 'nosniff')\n\n    // standard headers\n    res.setHeader('Content-Type', 'text/html; charset=utf-8')\n    res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'))\n\n    if (req.method === 'HEAD') {\n      res.end()\n      return\n    }\n\n    res.end(body, 'utf8')\n  }\n\n  if (isFinished(req)) {\n    write()\n    return\n  }\n\n  // unpipe everything from the request\n  req.unpipe()\n\n  // flush the request\n  onFinished(req, write)\n  req.resume()\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}