{"ast":null,"code":"/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nvar createError = require('http-errors');\nvar getBody = require('raw-body');\nvar iconv = require('iconv-lite');\nvar onFinished = require('on-finished');\nvar zlib = require('node:zlib');\n\n/**\n * Module exports.\n */\n\nmodule.exports = read;\n\n/**\n * Read a request into a buffer and parse.\n *\n * @param {object} req\n * @param {object} res\n * @param {function} next\n * @param {function} parse\n * @param {function} debug\n * @param {object} options\n * @private\n */\n\nfunction read(req, res, next, parse, debug, options) {\n  var length;\n  var opts = options;\n  var stream;\n\n  // read options\n  var encoding = opts.encoding !== null ? opts.encoding : null;\n  var verify = opts.verify;\n  try {\n    // get the content stream\n    stream = contentstream(req, debug, opts.inflate);\n    length = stream.length;\n    stream.length = undefined;\n  } catch (err) {\n    return next(err);\n  }\n\n  // set raw-body options\n  opts.length = length;\n  opts.encoding = verify ? null : encoding;\n\n  // assert charset is supported\n  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\n    return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n      charset: encoding.toLowerCase(),\n      type: 'charset.unsupported'\n    }));\n  }\n\n  // read body\n  debug('read body');\n  getBody(stream, opts, function (error, body) {\n    if (error) {\n      var _error;\n      if (error.type === 'encoding.unsupported') {\n        // echo back charset\n        _error = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n          charset: encoding.toLowerCase(),\n          type: 'charset.unsupported'\n        });\n      } else {\n        // set status code on error\n        _error = createError(400, error);\n      }\n\n      // unpipe from stream and destroy\n      if (stream !== req) {\n        req.unpipe();\n        stream.destroy();\n      }\n\n      // read off entire request\n      dump(req, function onfinished() {\n        next(createError(400, _error));\n      });\n      return;\n    }\n\n    // verify\n    if (verify) {\n      try {\n        debug('verify body');\n        verify(req, res, body, encoding);\n      } catch (err) {\n        next(createError(403, err, {\n          body: body,\n          type: err.type || 'entity.verify.failed'\n        }));\n        return;\n      }\n    }\n\n    // parse\n    var str = body;\n    try {\n      debug('parse body');\n      str = typeof body !== 'string' && encoding !== null ? iconv.decode(body, encoding) : body;\n      req.body = parse(str, encoding);\n    } catch (err) {\n      next(createError(400, err, {\n        body: str,\n        type: err.type || 'entity.parse.failed'\n      }));\n      return;\n    }\n    next();\n  });\n}\n\n/**\n * Get the content stream of the request.\n *\n * @param {object} req\n * @param {function} debug\n * @param {boolean} [inflate=true]\n * @return {object}\n * @api private\n */\n\nfunction contentstream(req, debug, inflate) {\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase();\n  var length = req.headers['content-length'];\n  debug('content-encoding \"%s\"', encoding);\n  if (inflate === false && encoding !== 'identity') {\n    throw createError(415, 'content encoding unsupported', {\n      encoding: encoding,\n      type: 'encoding.unsupported'\n    });\n  }\n  if (encoding === 'identity') {\n    req.length = length;\n    return req;\n  }\n  var stream = createDecompressionStream(encoding, debug);\n  req.pipe(stream);\n  return stream;\n}\n\n/**\n * Create a decompression stream for the given encoding.\n * @param {string} encoding\n * @param {function} debug\n * @return {object}\n * @api private\n */\nfunction createDecompressionStream(encoding, debug) {\n  switch (encoding) {\n    case 'deflate':\n      debug('inflate body');\n      return zlib.createInflate();\n    case 'gzip':\n      debug('gunzip body');\n      return zlib.createGunzip();\n    case 'br':\n      debug('brotli decompress body');\n      return zlib.createBrotliDecompress();\n    default:\n      throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\n        encoding: encoding,\n        type: 'encoding.unsupported'\n      });\n  }\n}\n\n/**\n * Dump the contents of a request.\n *\n * @param {object} req\n * @param {function} callback\n * @api private\n */\n\nfunction dump(req, callback) {\n  if (onFinished.isFinished(req)) {\n    callback(null);\n  } else {\n    onFinished(req, callback);\n    req.resume();\n  }\n}","map":{"version":3,"names":["createError","require","getBody","iconv","onFinished","zlib","module","exports","read","req","res","next","parse","debug","options","length","opts","stream","encoding","verify","contentstream","inflate","undefined","err","encodingExists","toUpperCase","charset","toLowerCase","type","error","body","_error","unpipe","destroy","dump","onfinished","str","decode","headers","createDecompressionStream","pipe","createInflate","createGunzip","createBrotliDecompress","callback","isFinished","resume"],"sources":["/Users/linwanjou/Documents/GitHub/SinoPac_Sign_Language/永豐產學/App/node_modules/body-parser/lib/read.js"],"sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar createError = require('http-errors')\nvar getBody = require('raw-body')\nvar iconv = require('iconv-lite')\nvar onFinished = require('on-finished')\nvar zlib = require('node:zlib')\n\n/**\n * Module exports.\n */\n\nmodule.exports = read\n\n/**\n * Read a request into a buffer and parse.\n *\n * @param {object} req\n * @param {object} res\n * @param {function} next\n * @param {function} parse\n * @param {function} debug\n * @param {object} options\n * @private\n */\n\nfunction read (req, res, next, parse, debug, options) {\n  var length\n  var opts = options\n  var stream\n\n  // read options\n  var encoding = opts.encoding !== null\n    ? opts.encoding\n    : null\n  var verify = opts.verify\n\n  try {\n    // get the content stream\n    stream = contentstream(req, debug, opts.inflate)\n    length = stream.length\n    stream.length = undefined\n  } catch (err) {\n    return next(err)\n  }\n\n  // set raw-body options\n  opts.length = length\n  opts.encoding = verify\n    ? null\n    : encoding\n\n  // assert charset is supported\n  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\n    return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n      charset: encoding.toLowerCase(),\n      type: 'charset.unsupported'\n    }))\n  }\n\n  // read body\n  debug('read body')\n  getBody(stream, opts, function (error, body) {\n    if (error) {\n      var _error\n\n      if (error.type === 'encoding.unsupported') {\n        // echo back charset\n        _error = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n          charset: encoding.toLowerCase(),\n          type: 'charset.unsupported'\n        })\n      } else {\n        // set status code on error\n        _error = createError(400, error)\n      }\n\n      // unpipe from stream and destroy\n      if (stream !== req) {\n        req.unpipe()\n        stream.destroy()\n      }\n\n      // read off entire request\n      dump(req, function onfinished () {\n        next(createError(400, _error))\n      })\n      return\n    }\n\n    // verify\n    if (verify) {\n      try {\n        debug('verify body')\n        verify(req, res, body, encoding)\n      } catch (err) {\n        next(createError(403, err, {\n          body: body,\n          type: err.type || 'entity.verify.failed'\n        }))\n        return\n      }\n    }\n\n    // parse\n    var str = body\n    try {\n      debug('parse body')\n      str = typeof body !== 'string' && encoding !== null\n        ? iconv.decode(body, encoding)\n        : body\n      req.body = parse(str, encoding)\n    } catch (err) {\n      next(createError(400, err, {\n        body: str,\n        type: err.type || 'entity.parse.failed'\n      }))\n      return\n    }\n\n    next()\n  })\n}\n\n/**\n * Get the content stream of the request.\n *\n * @param {object} req\n * @param {function} debug\n * @param {boolean} [inflate=true]\n * @return {object}\n * @api private\n */\n\nfunction contentstream (req, debug, inflate) {\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase()\n  var length = req.headers['content-length']\n\n  debug('content-encoding \"%s\"', encoding)\n\n  if (inflate === false && encoding !== 'identity') {\n    throw createError(415, 'content encoding unsupported', {\n      encoding: encoding,\n      type: 'encoding.unsupported'\n    })\n  }\n\n  if (encoding === 'identity') {\n    req.length = length\n    return req\n  }\n\n  var stream = createDecompressionStream(encoding, debug)\n  req.pipe(stream)\n  return stream\n}\n\n/**\n * Create a decompression stream for the given encoding.\n * @param {string} encoding\n * @param {function} debug\n * @return {object}\n * @api private\n */\nfunction createDecompressionStream (encoding, debug) {\n  switch (encoding) {\n    case 'deflate':\n      debug('inflate body')\n      return zlib.createInflate()\n    case 'gzip':\n      debug('gunzip body')\n      return zlib.createGunzip()\n    case 'br':\n      debug('brotli decompress body')\n      return zlib.createBrotliDecompress()\n    default:\n      throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\n        encoding: encoding,\n        type: 'encoding.unsupported'\n      })\n  }\n}\n\n/**\n * Dump the contents of a request.\n *\n * @param {object} req\n * @param {function} callback\n * @api private\n */\n\nfunction dump (req, callback) {\n  if (onFinished.isFinished(req)) {\n    callback(null)\n  } else {\n    onFinished(req, callback)\n    req.resume()\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}