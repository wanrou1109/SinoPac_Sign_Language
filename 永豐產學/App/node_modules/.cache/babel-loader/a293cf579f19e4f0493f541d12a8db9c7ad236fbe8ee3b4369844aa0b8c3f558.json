{"ast":null,"code":"/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * @typedef Parsers\n * @type {function}\n * @property {function} json\n * @property {function} raw\n * @property {function} text\n * @property {function} urlencoded\n */\n\n/**\n * Module exports.\n * @type {Parsers}\n */\nexports = module.exports = bodyParser;\n\n/**\n * JSON parser.\n * @public\n */\n\nObject.defineProperty(exports, 'json', {\n  configurable: true,\n  enumerable: true,\n  get: () => require('./lib/types/json')\n});\n\n/**\n * Raw parser.\n * @public\n */\n\nObject.defineProperty(exports, 'raw', {\n  configurable: true,\n  enumerable: true,\n  get: () => require('./lib/types/raw')\n});\n\n/**\n * Text parser.\n * @public\n */\n\nObject.defineProperty(exports, 'text', {\n  configurable: true,\n  enumerable: true,\n  get: () => require('./lib/types/text')\n});\n\n/**\n * URL-encoded parser.\n * @public\n */\n\nObject.defineProperty(exports, 'urlencoded', {\n  configurable: true,\n  enumerable: true,\n  get: () => require('./lib/types/urlencoded')\n});\n\n/**\n * Create a middleware to parse json and urlencoded bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @deprecated\n * @public\n */\n\nfunction bodyParser() {\n  throw new Error('The bodyParser() generic has been split into individual middleware to use instead.');\n}","map":{"version":3,"names":["exports","module","bodyParser","Object","defineProperty","configurable","enumerable","get","require","Error"],"sources":["/Users/linwanjou/Documents/GitHub/SinoPac_Sign_Language/永豐產學/App/node_modules/body-parser/index.js"],"sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * @typedef Parsers\n * @type {function}\n * @property {function} json\n * @property {function} raw\n * @property {function} text\n * @property {function} urlencoded\n */\n\n/**\n * Module exports.\n * @type {Parsers}\n */\n\nexports = module.exports = bodyParser\n\n/**\n * JSON parser.\n * @public\n */\n\nObject.defineProperty(exports, 'json', {\n  configurable: true,\n  enumerable: true,\n  get: () => require('./lib/types/json')\n})\n\n/**\n * Raw parser.\n * @public\n */\n\nObject.defineProperty(exports, 'raw', {\n  configurable: true,\n  enumerable: true,\n  get: () => require('./lib/types/raw')\n})\n\n/**\n * Text parser.\n * @public\n */\n\nObject.defineProperty(exports, 'text', {\n  configurable: true,\n  enumerable: true,\n  get: () => require('./lib/types/text')\n})\n\n/**\n * URL-encoded parser.\n * @public\n */\n\nObject.defineProperty(exports, 'urlencoded', {\n  configurable: true,\n  enumerable: true,\n  get: () => require('./lib/types/urlencoded')\n})\n\n/**\n * Create a middleware to parse json and urlencoded bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @deprecated\n * @public\n */\n\nfunction bodyParser () {\n  throw new Error('The bodyParser() generic has been split into individual middleware to use instead.')\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEAA,OAAO,GAAGC,MAAM,CAACD,OAAO,GAAGE,UAAU;;AAErC;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACJ,OAAO,EAAE,MAAM,EAAE;EACrCK,YAAY,EAAE,IAAI;EAClBC,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAEA,CAAA,KAAMC,OAAO,CAAC,kBAAkB;AACvC,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAEAL,MAAM,CAACC,cAAc,CAACJ,OAAO,EAAE,KAAK,EAAE;EACpCK,YAAY,EAAE,IAAI;EAClBC,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAEA,CAAA,KAAMC,OAAO,CAAC,iBAAiB;AACtC,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAEAL,MAAM,CAACC,cAAc,CAACJ,OAAO,EAAE,MAAM,EAAE;EACrCK,YAAY,EAAE,IAAI;EAClBC,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAEA,CAAA,KAAMC,OAAO,CAAC,kBAAkB;AACvC,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAEAL,MAAM,CAACC,cAAc,CAACJ,OAAO,EAAE,YAAY,EAAE;EAC3CK,YAAY,EAAE,IAAI;EAClBC,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAEA,CAAA,KAAMC,OAAO,CAAC,wBAAwB;AAC7C,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASN,UAAUA,CAAA,EAAI;EACrB,MAAM,IAAIO,KAAK,CAAC,oFAAoF,CAAC;AACvG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}