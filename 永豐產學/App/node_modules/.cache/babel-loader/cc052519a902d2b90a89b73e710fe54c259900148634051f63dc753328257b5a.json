{"ast":null,"code":"var _jsxFileName = \"/Users/linwanjou/Documents/GitHub/SinoPac_Sign_Language/\\u6C38\\u8C50\\u7522\\u5B78/App/src/components/SignLanguageRecognition.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAppContext } from '../contexts/AppContext.js';\nimport Header from './Header.js';\nimport '../styles/SignLanguageRecognition.css';\nimport { response } from 'express';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignLanguageRecognition = () => {\n  _s();\n  var _location$state;\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    addMessage,\n    editMessage,\n    setRecognitionStatus,\n    recognitionStatus\n  } = useAppContext();\n  const [isRecording, setIsRecording] = useState(false);\n  const [result, setResult] = useState('');\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const recordedChuncksRef = useRef([]);\n  const streamRef = useRef(null);\n  const editMessageID = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.messageID;\n  const {\n    selectedBranch\n  } = location.state || {};\n\n  // 模擬鏡頭啟動\n  useEffect(() => {\n    const setupCamera = async () => {\n      try {\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n          const stream = await navigator.mediaDevices.getUserMedia({\n            video: true\n          });\n          streamRef.current = stream;\n          if (videoRef.current) {\n            videoRef.current.srcObject = stream;\n          }\n        }\n      } catch (error) {\n        console.error('鏡頭開啟失敗:', error);\n        alert('無法開啟鏡頭，請確認您已授予攝影機存取權限。');\n      }\n    };\n    setupCamera();\n\n    // 清理函數\n    return () => {\n      if (streamRef.current) {\n        const tracks = streamRef.current.getTracks();\n        tracks.forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // 測試與後端的連接\n  useEffect(() => {\n    console.log('開始測試與後端的連接...');\n    fetch('http://localhost:8080/api/test').then(response => {\n      console.log('收到後端回應:', response.status);\n      return response.json();\n    }).then(data => console.log('後端連接測試成功:', data)).catch(error => console.error('後端連接錯誤:', error));\n  }, []);\n\n  // 手語辨識模擬回應\n  useEffect(() => {\n    let apiRequestTimer;\n\n    // 當錄影停止且有視頻 URL 時，開始處理辨識\n    if (!isRecording && videoURL) {\n      // 設置狀態為處理中\n      setResult('處理中...');\n\n      // 給伺服器一點時間處理視頻\n      apiRequestTimer = setTimeout(() => {\n        // 發送請求到手語辨識 API\n        fetch('http://localhost:8080/api/analyze_latest', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(response => {\n          if (!response.ok) {\n            throw new Error('網路回應不正常');\n          }\n          return response.json();\n        }).then(data => {\n          // 記錄 API 回傳結果\n          console.log('手語辨識結果:', data);\n\n          // 獲取辨識文字結果（API 會回傳 result 陣列）\n          if (data.result && data.result.length > 0) {\n            var _location$state2;\n            // 將結果數組轉換為句子\n            const recognizedText = data.result.join(' ');\n\n            // 更新顯示結果\n            setResult(recognizedText);\n\n            // 添加到對話框或更新現有訊息\n            if (location.state && location.state.messageID) {\n              // 更新現有訊息\n              editMessage(location.state.messageID, recognizedText);\n            } else {\n              // 添加新訊息\n              const newMessage = {\n                id: Date.now().toString(),\n                text: recognizedText,\n                sender: 'customer',\n                timestamp: new Date().toISOString()\n              };\n              setConversations(prev => [...prev, newMessage]);\n            }\n            navigate('/conversation', {\n              state: {\n                selectedBranch: (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.selectedBranch\n              }\n            });\n          } else {\n            setResult('無法辨識手語內容');\n          }\n        }).catch(error => {\n          console.error('取得手語辨識結果時發生錯誤:', error);\n          setResult('辨識過程發生錯誤，請重試');\n        });\n      }, 1000);\n    }\n    return () => {\n      // 清理計時器\n      if (apiRequestTimer) {\n        clearTimeout(apiRequestTimer);\n      }\n    };\n  }, [isRecording, videoURL, navigate, location.state, editMessage, setConversations]);\n\n  // 開始錄製\n  const handleStartRecording = () => {\n    if (!streamRef.current) {\n      alert('鏡頭尚未準備就緒，請稍後再試。');\n      return;\n    }\n    recordedChuncksRef.current = [];\n    try {\n      const mediaRecorder = new MediaRecorder(streamRef.current, {\n        mimeType: 'video/webm;codecs=vp9'\n      });\n      mediaRecorder.ondataavailable = event => {\n        if (event.data && event.data.size > 0) {\n          recordedChuncksRef.current.push(event.data);\n          console.log(`收到錄製片段: ${event.data.size} 位元組`);\n        }\n      };\n      mediaRecorderRef.current = mediaRecorder;\n      mediaRecorder.start(1000); // 每秒觸發一次 dataavailable 事件\n      console.log('開始錄製視訊');\n      setIsRecording(true);\n      setRecognitionStatus('recording');\n      setResult('');\n    } catch (error) {\n      console.error('啟動錄製時發生錯誤:', error);\n      alert(`無法開始錄製: ${error.message}`);\n    }\n  };\n\n  // 停止錄製\n  const handleStopRecording = () => {\n    if (!mediaRecorderRef.current || mediaRecorderRef.current.state === 'inactive') {\n      console.warn('沒有進行中的錄製');\n      return;\n    }\n    console.log('停止錄製');\n    mediaRecorderRef.current.stop();\n    setIsRecording(false);\n    setRecognitionStatus('processing');\n\n    // 處理錄好的影像\n    mediaRecorderRef.current.onstop = async () => {\n      try {\n        console.log(`錄製完成，共 ${recordedChuncksRef.current.length} 個片段`);\n        if (recordedChuncksRef.current.length === 0) {\n          throw new Error('未收到任何視訊資料');\n        }\n\n        // 創建 Blob\n        const blob = new Blob(recordedChuncksRef.current, {\n          type: 'video/webm'\n        });\n        console.log(`視訊檔案大小: ${blob.size} 位元組`);\n        if (blob.size === 0) {\n          throw new Error('視訊檔案大小為 0');\n        }\n\n        // 上傳影片\n        await uploadVideoToServer(blob);\n\n        // 模擬處理延遲\n        setTimeout(() => {\n          setRecognitionStatus('idle');\n\n          // 編輯或新增訊息\n          if (editMessageID) {\n            editMessage(editMessageID, result);\n          } else {\n            addMessage(result, 'customer');\n          }\n\n          // 回 conversation page\n          navigate('/conversation', {\n            state: {\n              selectedBranch\n            }\n          });\n        }, 1500);\n      } catch (error) {\n        console.error('處理錄製視訊失敗：', error);\n        setRecognitionStatus('idle');\n        alert('處理視訊失敗，請重試: ' + error.message);\n      }\n    };\n  };\n  const uploadVideoToServer = async videoBlob => {\n    const formData = new FormData();\n    formData.append('video', videoBlob, 'sign-language-recording.webm');\n    console.log('準備上傳視訊檔案');\n    console.log('視訊檔案大小:', videoBlob.size, '位元組');\n    try {\n      console.log('開始上傳視訊檔案到 /api/upload/video');\n      const response = await fetch('http://localhost:8080/api/upload/video', {\n        method: 'POST',\n        body: formData,\n        mode: 'cors',\n        credentials: 'omit'\n      });\n      console.log('收到伺服器回應', response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('伺服器回應錯誤:', errorText);\n        throw new Error(`伺服器回應錯誤: ${response.status} ${errorText}`);\n      }\n      const data = await response.json();\n      console.log('伺服器回應數據', data);\n\n      // ✅ 上傳成功後自動觸發分析最新影片\n      await analyzeLatestVideo();\n      return data;\n    } catch (error) {\n      console.error('上傳過程中發生錯誤:', error);\n      throw error;\n    }\n  };\n\n  // call /api/analyze_latest\n  const analyzeLatestVideo = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/api/analyze_latest');\n      const data = await response.json();\n      if (response.ok) {\n        const sentence = data.result.join(' ');\n        setResult(sentence);\n        console.log('分析結果:', sentence);\n      } else {\n        console.error('分析錯誤:', data.error);\n        setResult(`錯誤：${data.error}`);\n      }\n    } catch (error) {\n      console.error('辨識 API 呼叫失敗:', error);\n      setResult('辨識過程發生錯誤');\n    }\n  };\n\n  // 取消 and 返回\n  const handleCancel = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n    }\n    setIsRecording(false);\n    setRecognitionStatus('idle');\n    navigate('/conversation', {\n      state: {\n        selectedBranch\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sign-language-recognition-screen\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      showBackButton: handleCancel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recognition-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          autoPlay: true,\n          playsInline: true,\n          muted: true,\n          className: `${isRecording ? 'recording' : ''} mirror-video`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-bar\",\n      children: !isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"record-button\",\n        onClick: handleStartRecording,\n        disabled: recognitionStatus === 'processing',\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-inner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"record-button recording-active\",\n        onClick: handleStopRecording,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-inner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 9\n  }, this);\n};\n_s(SignLanguageRecognition, \"CN2f/HtOpUSIMxNtcRxnYYy1h3w=\", false, function () {\n  return [useNavigate, useLocation, useAppContext];\n});\n_c = SignLanguageRecognition;\nexport default SignLanguageRecognition;\nvar _c;\n$RefreshReg$(_c, \"SignLanguageRecognition\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","useLocation","useAppContext","Header","response","jsxDEV","_jsxDEV","SignLanguageRecognition","_s","_location$state","navigate","location","addMessage","editMessage","setRecognitionStatus","recognitionStatus","isRecording","setIsRecording","result","setResult","videoRef","mediaRecorderRef","recordedChuncksRef","streamRef","editMessageID","state","messageID","selectedBranch","setupCamera","navigator","mediaDevices","getUserMedia","stream","video","current","srcObject","error","console","alert","tracks","getTracks","forEach","track","stop","log","fetch","then","status","json","data","catch","apiRequestTimer","videoURL","setTimeout","method","headers","ok","Error","length","_location$state2","recognizedText","join","newMessage","id","Date","now","toString","text","sender","timestamp","toISOString","setConversations","prev","clearTimeout","handleStartRecording","mediaRecorder","MediaRecorder","mimeType","ondataavailable","event","size","push","start","message","handleStopRecording","warn","onstop","blob","Blob","type","uploadVideoToServer","videoBlob","formData","FormData","append","body","mode","credentials","errorText","analyzeLatestVideo","sentence","handleCancel","className","children","showBackButton","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","muted","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/linwanjou/Documents/GitHub/SinoPac_Sign_Language/永豐產學/App/src/components/SignLanguageRecognition.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAppContext } from '../contexts/AppContext.js';\nimport Header from './Header.js';\nimport '../styles/SignLanguageRecognition.css';\nimport { response } from 'express';\n\nconst SignLanguageRecognition = () => {\n    const navigate = useNavigate();\n    const location = useLocation();\n    const { addMessage, editMessage, setRecognitionStatus, recognitionStatus } = useAppContext();\n    const [ isRecording, setIsRecording ] = useState(false);\n    const [ result, setResult ] = useState('');\n    const videoRef = useRef(null);\n    const mediaRecorderRef = useRef(null);\n    const recordedChuncksRef = useRef([]);\n    const streamRef = useRef(null);\n    const editMessageID = location.state?.messageID;\n    const { selectedBranch } = location.state || {};\n\n    // 模擬鏡頭啟動\n    useEffect(() => {\n        const setupCamera = async () => {\n            try {\n                if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n                    const stream = await navigator.mediaDevices.getUserMedia({video: true});\n                    streamRef.current = stream;\n                    if (videoRef.current) {\n                        videoRef.current.srcObject = stream;\n                    }\n                }\n            } catch (error) {\n                console.error('鏡頭開啟失敗:', error);\n                alert('無法開啟鏡頭，請確認您已授予攝影機存取權限。');\n            }\n        };\n        \n        setupCamera();\n\n        // 清理函數\n        return () => {\n            if(streamRef.current) {\n                const tracks = streamRef.current.getTracks();\n                tracks.forEach(track => track.stop());\n            }\n        };\n    }, []);\n\n    // 測試與後端的連接\n    useEffect(() => {\n        console.log('開始測試與後端的連接...');\n        fetch('http://localhost:8080/api/test')\n            .then(response => {\n                console.log('收到後端回應:', response.status);\n                return response.json();\n            })\n            .then(data => console.log('後端連接測試成功:', data))\n            .catch(error => console.error('後端連接錯誤:', error));\n    }, []);\n\n    // 手語辨識模擬回應\n    useEffect(() => {\n        let apiRequestTimer;\n        \n        // 當錄影停止且有視頻 URL 時，開始處理辨識\n        if (!isRecording && videoURL) {\n            // 設置狀態為處理中\n            setResult('處理中...');\n            \n            // 給伺服器一點時間處理視頻\n            apiRequestTimer = setTimeout(() => {\n                // 發送請求到手語辨識 API\n                fetch('http://localhost:8080/api/analyze_latest', {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                })\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error('網路回應不正常');\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    // 記錄 API 回傳結果\n                    console.log('手語辨識結果:', data);\n                    \n                    // 獲取辨識文字結果（API 會回傳 result 陣列）\n                    if (data.result && data.result.length > 0) {\n                        // 將結果數組轉換為句子\n                        const recognizedText = data.result.join(' ');\n                        \n                        // 更新顯示結果\n                        setResult(recognizedText);\n                        \n                        // 添加到對話框或更新現有訊息\n                        if (location.state && location.state.messageID) {\n                            // 更新現有訊息\n                            editMessage(location.state.messageID, recognizedText);\n                        } else {\n                            // 添加新訊息\n                            const newMessage = {\n                                id: Date.now().toString(),\n                                text: recognizedText,\n                                sender: 'customer', \n                                timestamp: new Date().toISOString()\n                            };\n                            setConversations(prev => [...prev, newMessage]);\n                        }\n                        \n                        navigate('/conversation', { \n                            state: { selectedBranch: location.state?.selectedBranch } \n                        });\n                    } else {\n                        setResult('無法辨識手語內容');\n                    }\n                })\n                .catch(error => {\n                    console.error('取得手語辨識結果時發生錯誤:', error);\n                    setResult('辨識過程發生錯誤，請重試');\n                });\n            }, 1000);\n        }\n        \n        return () => {\n            // 清理計時器\n            if (apiRequestTimer) {\n                clearTimeout(apiRequestTimer);\n            }\n        };\n    }, [isRecording, videoURL, navigate, location.state, editMessage, setConversations]);\n\n    // 開始錄製\n    const handleStartRecording = () => {\n        if (!streamRef.current) {\n            alert('鏡頭尚未準備就緒，請稍後再試。');\n            return;\n        }\n\n        recordedChuncksRef.current = [];\n        try {\n            const mediaRecorder = new MediaRecorder(streamRef.current, {\n                mimeType: 'video/webm;codecs=vp9'\n            });\n\n            mediaRecorder.ondataavailable = (event) => {\n                if (event.data && event.data.size > 0) {\n                    recordedChuncksRef.current.push(event.data);\n                    console.log(`收到錄製片段: ${event.data.size} 位元組`);\n                }\n            };\n\n            mediaRecorderRef.current = mediaRecorder;\n            mediaRecorder.start(1000); // 每秒觸發一次 dataavailable 事件\n            console.log('開始錄製視訊');\n            setIsRecording(true);\n            setRecognitionStatus('recording');\n            setResult('');\n        } catch (error) {\n            console.error('啟動錄製時發生錯誤:', error);\n            alert(`無法開始錄製: ${error.message}`);\n        }\n    };\n\n    // 停止錄製\n    const handleStopRecording = () => {\n        if (!mediaRecorderRef.current || mediaRecorderRef.current.state === 'inactive') {\n            console.warn('沒有進行中的錄製');\n            return;\n        }\n\n        console.log('停止錄製');\n        mediaRecorderRef.current.stop();\n        setIsRecording(false);\n        setRecognitionStatus('processing');\n\n        // 處理錄好的影像\n        mediaRecorderRef.current.onstop = async () => {\n            try {\n                console.log(`錄製完成，共 ${recordedChuncksRef.current.length} 個片段`);\n                if (recordedChuncksRef.current.length === 0) {\n                    throw new Error('未收到任何視訊資料');\n                }\n                \n                // 創建 Blob\n                const blob = new Blob(recordedChuncksRef.current, { type: 'video/webm' });\n                console.log(`視訊檔案大小: ${blob.size} 位元組`);\n                \n                if (blob.size === 0) {\n                    throw new Error('視訊檔案大小為 0');\n                }\n                \n                // 上傳影片\n                await uploadVideoToServer(blob);\n                \n                // 模擬處理延遲\n                setTimeout(() => {\n                    setRecognitionStatus('idle');\n\n                    // 編輯或新增訊息\n                    if (editMessageID) {\n                        editMessage(editMessageID, result);\n                    } else {\n                        addMessage(result, 'customer');\n                    }\n\n                    // 回 conversation page\n                    navigate('/conversation', { state: { selectedBranch } });\n                }, 1500);\n            } catch (error) {\n                console.error('處理錄製視訊失敗：', error);\n                setRecognitionStatus('idle');\n                alert('處理視訊失敗，請重試: ' + error.message);\n            }\n        };\n    };\n\n    const uploadVideoToServer = async (videoBlob) => {\n        const formData = new FormData();\n        formData.append('video', videoBlob, 'sign-language-recording.webm');\n    \n        console.log('準備上傳視訊檔案');\n        console.log('視訊檔案大小:', videoBlob.size, '位元組');\n    \n        try {\n            console.log('開始上傳視訊檔案到 /api/upload/video');\n    \n            const response = await fetch('http://localhost:8080/api/upload/video', {\n                method: 'POST',\n                body: formData,\n                mode: 'cors',\n                credentials: 'omit',\n            });\n    \n            console.log('收到伺服器回應', response.status);\n    \n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('伺服器回應錯誤:', errorText);\n                throw new Error(`伺服器回應錯誤: ${response.status} ${errorText}`);\n            }\n    \n            const data = await response.json();\n            console.log('伺服器回應數據', data);\n    \n            // ✅ 上傳成功後自動觸發分析最新影片\n            await analyzeLatestVideo();\n    \n            return data;\n        } catch (error) {\n            console.error('上傳過程中發生錯誤:', error);\n            throw error;\n        }\n    };\n    \n    // call /api/analyze_latest\n    const analyzeLatestVideo = async () => {\n        try {\n            const response = await fetch('http://localhost:8080/api/analyze_latest');\n            const data = await response.json();\n    \n            if (response.ok) {\n                const sentence = data.result.join(' ');\n                setResult(sentence);\n                console.log('分析結果:', sentence);\n            } else {\n                console.error('分析錯誤:', data.error);\n                setResult(`錯誤：${data.error}`);\n            }\n        } catch (error) {\n            console.error('辨識 API 呼叫失敗:', error);\n            setResult('辨識過程發生錯誤');\n        }\n    };\n    \n\n    // 取消 and 返回\n    const handleCancel = () => {\n        if (mediaRecorderRef.current && isRecording) {\n            mediaRecorderRef.current.stop();\n        }\n        setIsRecording(false);\n        setRecognitionStatus('idle');\n        navigate('/conversation', { state: { selectedBranch } });\n    };\n\n    return (\n        <div className='sign-language-recognition-screen'>\n            <Header showBackButton = {handleCancel} />\n\n            <div className='recognition-container'>\n                <div className='video-container'>\n                    <video\n                        ref={videoRef}\n                        autoPlay\n                        playsInline\n                        muted\n                        className = {`${isRecording ? 'recording' : ''} mirror-video`} \n                    /> \n                </div>\n            </div>\n\n            <div className='action-bar'>\n                {!isRecording ? (\n                    <button \n                        className='record-button'\n                        onClick={handleStartRecording}\n                        disabled={recognitionStatus === 'processing'}\n                    >\n                        <div className='button-inner'></div>\n                    </button>\n                ) : (\n                    <button\n                        className='record-button recording-active'\n                        onClick={handleStopRecording}\n                    >\n                        <div className='button-inner'></div>\n                    </button>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default SignLanguageRecognition;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}