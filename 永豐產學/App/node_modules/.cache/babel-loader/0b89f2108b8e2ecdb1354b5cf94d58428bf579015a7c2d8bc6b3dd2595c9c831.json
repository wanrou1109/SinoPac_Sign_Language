{"ast":null,"code":"/*!\n * media-typer\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * RegExp to match type in RFC 6838\n *\n * type-name = restricted-name\n * subtype-name = restricted-name\n * restricted-name = restricted-name-first *126restricted-name-chars\n * restricted-name-first  = ALPHA / DIGIT\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\n * restricted-name-chars =/ \".\" ; Characters before first dot always\n *                              ; specify a facet name\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\n *                              ; specify a structured syntax suffix\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\n * DIGIT =  %x30-39             ; 0-9\n */\nvar SUBTYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;\nvar TYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;\nvar TYPE_REGEXP = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;\n\n/**\n * Module exports.\n */\n\nexports.format = format;\nexports.parse = parse;\nexports.test = test;\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format(obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required');\n  }\n  var subtype = obj.subtype;\n  var suffix = obj.suffix;\n  var type = obj.type;\n  if (!type || !TYPE_NAME_REGEXP.test(type)) {\n    throw new TypeError('invalid type');\n  }\n  if (!subtype || !SUBTYPE_NAME_REGEXP.test(subtype)) {\n    throw new TypeError('invalid subtype');\n  }\n\n  // format as type/subtype\n  var string = type + '/' + subtype;\n\n  // append +suffix\n  if (suffix) {\n    if (!TYPE_NAME_REGEXP.test(suffix)) {\n      throw new TypeError('invalid suffix');\n    }\n    string += '+' + suffix;\n  }\n  return string;\n}\n\n/**\n * Test media type.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction test(string) {\n  if (!string) {\n    throw new TypeError('argument string is required');\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string');\n  }\n  return TYPE_REGEXP.test(string.toLowerCase());\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction parse(string) {\n  if (!string) {\n    throw new TypeError('argument string is required');\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string');\n  }\n  var match = TYPE_REGEXP.exec(string.toLowerCase());\n  if (!match) {\n    throw new TypeError('invalid media type');\n  }\n  var type = match[1];\n  var subtype = match[2];\n  var suffix;\n\n  // suffix after last +\n  var index = subtype.lastIndexOf('+');\n  if (index !== -1) {\n    suffix = subtype.substr(index + 1);\n    subtype = subtype.substr(0, index);\n  }\n  return new MediaType(type, subtype, suffix);\n}\n\n/**\n * Class for MediaType object.\n * @public\n */\n\nfunction MediaType(type, subtype, suffix) {\n  this.type = type;\n  this.subtype = subtype;\n  this.suffix = suffix;\n}","map":{"version":3,"names":["SUBTYPE_NAME_REGEXP","TYPE_NAME_REGEXP","TYPE_REGEXP","exports","format","parse","test","obj","TypeError","subtype","suffix","type","string","toLowerCase","match","exec","index","lastIndexOf","substr","MediaType"],"sources":["/Users/linwanjou/Documents/GitHub/SinoPac_Sign_Language/永豐產學/App/node_modules/media-typer/index.js"],"sourcesContent":["/*!\n * media-typer\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * RegExp to match type in RFC 6838\n *\n * type-name = restricted-name\n * subtype-name = restricted-name\n * restricted-name = restricted-name-first *126restricted-name-chars\n * restricted-name-first  = ALPHA / DIGIT\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\n * restricted-name-chars =/ \".\" ; Characters before first dot always\n *                              ; specify a facet name\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\n *                              ; specify a structured syntax suffix\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\n * DIGIT =  %x30-39             ; 0-9\n */\nvar SUBTYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/\nvar TYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/\nvar TYPE_REGEXP = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/\n\n/**\n * Module exports.\n */\n\nexports.format = format\nexports.parse = parse\nexports.test = test\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format (obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var subtype = obj.subtype\n  var suffix = obj.suffix\n  var type = obj.type\n\n  if (!type || !TYPE_NAME_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  if (!subtype || !SUBTYPE_NAME_REGEXP.test(subtype)) {\n    throw new TypeError('invalid subtype')\n  }\n\n  // format as type/subtype\n  var string = type + '/' + subtype\n\n  // append +suffix\n  if (suffix) {\n    if (!TYPE_NAME_REGEXP.test(suffix)) {\n      throw new TypeError('invalid suffix')\n    }\n\n    string += '+' + suffix\n  }\n\n  return string\n}\n\n/**\n * Test media type.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction test (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  return TYPE_REGEXP.test(string.toLowerCase())\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var match = TYPE_REGEXP.exec(string.toLowerCase())\n\n  if (!match) {\n    throw new TypeError('invalid media type')\n  }\n\n  var type = match[1]\n  var subtype = match[2]\n  var suffix\n\n  // suffix after last +\n  var index = subtype.lastIndexOf('+')\n  if (index !== -1) {\n    suffix = subtype.substr(index + 1)\n    subtype = subtype.substr(0, index)\n  }\n\n  return new MediaType(type, subtype, suffix)\n}\n\n/**\n * Class for MediaType object.\n * @public\n */\n\nfunction MediaType (type, subtype, suffix) {\n  this.type = type\n  this.subtype = subtype\n  this.suffix = suffix\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}