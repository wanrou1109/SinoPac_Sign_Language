{"ast":null,"code":"/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nvar accepts = require('accepts');\nvar isIP = require('node:net').isIP;\nvar typeis = require('type-is');\nvar http = require('node:http');\nvar fresh = require('fresh');\nvar parseRange = require('range-parser');\nvar parse = require('parseurl');\nvar proxyaddr = require('proxy-addr');\n\n/**\n * Request prototype.\n * @public\n */\n\nvar req = Object.create(http.IncomingMessage.prototype);\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = req;\n\n/**\n * Return request header.\n *\n * The `Referrer` header field is special-cased,\n * both `Referrer` and `Referer` are interchangeable.\n *\n * Examples:\n *\n *     req.get('Content-Type');\n *     // => \"text/plain\"\n *\n *     req.get('content-type');\n *     // => \"text/plain\"\n *\n *     req.get('Something');\n *     // => undefined\n *\n * Aliased as `req.header()`.\n *\n * @param {String} name\n * @return {String}\n * @public\n */\n\nreq.get = req.header = function header(name) {\n  if (!name) {\n    throw new TypeError('name argument is required to req.get');\n  }\n  if (typeof name !== 'string') {\n    throw new TypeError('name must be a string to req.get');\n  }\n  var lc = name.toLowerCase();\n  switch (lc) {\n    case 'referer':\n    case 'referrer':\n      return this.headers.referrer || this.headers.referer;\n    default:\n      return this.headers[lc];\n  }\n};\n\n/**\n * To do: update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('html');\n *     // => \"html\"\n *     req.accepts('text/html');\n *     // => \"text/html\"\n *     req.accepts('json, text');\n *     // => \"json\"\n *     req.accepts('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('image/png');\n *     req.accepts('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     req.accepts(['html', 'json']);\n *     req.accepts('html', 'json');\n *     req.accepts('html, json');\n *     // => \"json\"\n *\n * @param {String|Array} type(s)\n * @return {String|Array|Boolean}\n * @public\n */\n\nreq.accepts = function () {\n  var accept = accepts(this);\n  return accept.types.apply(accept, arguments);\n};\n\n/**\n * Check if the given `encoding`s are accepted.\n *\n * @param {String} ...encoding\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsEncodings = function () {\n  var accept = accepts(this);\n  return accept.encodings.apply(accept, arguments);\n};\n\n/**\n * Check if the given `charset`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...charset\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsCharsets = function () {\n  var accept = accepts(this);\n  return accept.charsets.apply(accept, arguments);\n};\n\n/**\n * Check if the given `lang`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...lang\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsLanguages = function () {\n  var accept = accepts(this);\n  return accept.languages.apply(accept, arguments);\n};\n\n/**\n * Parse Range header field, capping to the given `size`.\n *\n * Unspecified ranges such as \"0-\" require knowledge of your resource length. In\n * the case of a byte range this is of course the total number of bytes. If the\n * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,\n * and `-2` when syntactically invalid.\n *\n * When ranges are returned, the array has a \"type\" property which is the type of\n * range that is required (most commonly, \"bytes\"). Each array element is an object\n * with a \"start\" and \"end\" property for the portion of the range.\n *\n * The \"combine\" option can be set to `true` and overlapping & adjacent ranges\n * will be combined into a single range.\n *\n * NOTE: remember that ranges are inclusive, so for example \"Range: users=0-3\"\n * should respond with 4 users when available, not 3.\n *\n * @param {number} size\n * @param {object} [options]\n * @param {boolean} [options.combine=false]\n * @return {number|array}\n * @public\n */\n\nreq.range = function range(size, options) {\n  var range = this.get('Range');\n  if (!range) return;\n  return parseRange(size, range, options);\n};\n\n/**\n * Parse the query string of `req.url`.\n *\n * This uses the \"query parser\" setting to parse the raw\n * string into an object.\n *\n * @return {String}\n * @api public\n */\n\ndefineGetter(req, 'query', function query() {\n  var queryparse = this.app.get('query parser fn');\n  if (!queryparse) {\n    // parsing is disabled\n    return Object.create(null);\n  }\n  var querystring = parse(this).query;\n  return queryparse(querystring);\n});\n\n/**\n * Check if the incoming request contains the \"Content-Type\"\n * header field, and it contains the given mime `type`.\n *\n * Examples:\n *\n *      // With Content-Type: text/html; charset=utf-8\n *      req.is('html');\n *      req.is('text/html');\n *      req.is('text/*');\n *      // => true\n *\n *      // When Content-Type is application/json\n *      req.is('json');\n *      req.is('application/json');\n *      req.is('application/*');\n *      // => true\n *\n *      req.is('html');\n *      // => false\n *\n * @param {String|Array} types...\n * @return {String|false|null}\n * @public\n */\n\nreq.is = function is(types) {\n  var arr = types;\n\n  // support flattened arguments\n  if (!Array.isArray(types)) {\n    arr = new Array(arguments.length);\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = arguments[i];\n    }\n  }\n  return typeis(this, arr);\n};\n\n/**\n * Return the protocol string \"http\" or \"https\"\n * when requested with TLS. When the \"trust proxy\"\n * setting trusts the socket address, the\n * \"X-Forwarded-Proto\" header field will be trusted\n * and used if present.\n *\n * If you're running behind a reverse proxy that\n * supplies https for you this may be enabled.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'protocol', function protocol() {\n  var proto = this.connection.encrypted ? 'https' : 'http';\n  var trust = this.app.get('trust proxy fn');\n  if (!trust(this.connection.remoteAddress, 0)) {\n    return proto;\n  }\n\n  // Note: X-Forwarded-Proto is normally only ever a\n  //       single value, but this is to be safe.\n  var header = this.get('X-Forwarded-Proto') || proto;\n  var index = header.indexOf(',');\n  return index !== -1 ? header.substring(0, index).trim() : header.trim();\n});\n\n/**\n * Short-hand for:\n *\n *    req.protocol === 'https'\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'secure', function secure() {\n  return this.protocol === 'https';\n});\n\n/**\n * Return the remote address from the trusted proxy.\n *\n * The is the remote address on the socket unless\n * \"trust proxy\" is set.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'ip', function ip() {\n  var trust = this.app.get('trust proxy fn');\n  return proxyaddr(this, trust);\n});\n\n/**\n * When \"trust proxy\" is set, trusted proxy addresses + client.\n *\n * For example if the value were \"client, proxy1, proxy2\"\n * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\n * \"proxy2\" were trusted.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'ips', function ips() {\n  var trust = this.app.get('trust proxy fn');\n  var addrs = proxyaddr.all(this, trust);\n\n  // reverse the order (to farthest -> closest)\n  // and remove socket address\n  addrs.reverse().pop();\n  return addrs;\n});\n\n/**\n * Return subdomains as an array.\n *\n * Subdomains are the dot-separated parts of the host before the main domain of\n * the app. By default, the domain of the app is assumed to be the last two\n * parts of the host. This can be changed by setting \"subdomain offset\".\n *\n * For example, if the domain is \"tobi.ferrets.example.com\":\n * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\n * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'subdomains', function subdomains() {\n  var hostname = this.hostname;\n  if (!hostname) return [];\n  var offset = this.app.get('subdomain offset');\n  var subdomains = !isIP(hostname) ? hostname.split('.').reverse() : [hostname];\n  return subdomains.slice(offset);\n});\n\n/**\n * Short-hand for `url.parse(req.url).pathname`.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'path', function path() {\n  return parse(this).pathname;\n});\n\n/**\n * Parse the \"Host\" header field to a host.\n *\n * When the \"trust proxy\" setting trusts the socket\n * address, the \"X-Forwarded-Host\" header field will\n * be trusted.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'host', function host() {\n  var trust = this.app.get('trust proxy fn');\n  var val = this.get('X-Forwarded-Host');\n  if (!val || !trust(this.connection.remoteAddress, 0)) {\n    val = this.get('Host');\n  } else if (val.indexOf(',') !== -1) {\n    // Note: X-Forwarded-Host is normally only ever a\n    //       single value, but this is to be safe.\n    val = val.substring(0, val.indexOf(',')).trimRight();\n  }\n  return val || undefined;\n});\n\n/**\n * Parse the \"Host\" header field to a hostname.\n *\n * When the \"trust proxy\" setting trusts the socket\n * address, the \"X-Forwarded-Host\" header field will\n * be trusted.\n *\n * @return {String}\n * @api public\n */\n\ndefineGetter(req, 'hostname', function hostname() {\n  var host = this.host;\n  if (!host) return;\n\n  // IPv6 literal support\n  var offset = host[0] === '[' ? host.indexOf(']') + 1 : 0;\n  var index = host.indexOf(':', offset);\n  return index !== -1 ? host.substring(0, index) : host;\n});\n\n/**\n * Check if the request is fresh, aka\n * Last-Modified or the ETag\n * still match.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'fresh', function () {\n  var method = this.method;\n  var res = this.res;\n  var status = res.statusCode;\n\n  // GET or HEAD for weak freshness validation only\n  if ('GET' !== method && 'HEAD' !== method) return false;\n\n  // 2xx or 304 as per rfc2616 14.26\n  if (status >= 200 && status < 300 || 304 === status) {\n    return fresh(this.headers, {\n      'etag': res.get('ETag'),\n      'last-modified': res.get('Last-Modified')\n    });\n  }\n  return false;\n});\n\n/**\n * Check if the request is stale, aka\n * \"Last-Modified\" and / or the \"ETag\" for the\n * resource has changed.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'stale', function stale() {\n  return !this.fresh;\n});\n\n/**\n * Check if the request was an _XMLHttpRequest_.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'xhr', function xhr() {\n  var val = this.get('X-Requested-With') || '';\n  return val.toLowerCase() === 'xmlhttprequest';\n});\n\n/**\n * Helper function for creating a getter on an object.\n *\n * @param {Object} obj\n * @param {String} name\n * @param {Function} getter\n * @private\n */\nfunction defineGetter(obj, name, getter) {\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: true,\n    get: getter\n  });\n}","map":{"version":3,"names":["accepts","require","isIP","typeis","http","fresh","parseRange","parse","proxyaddr","req","Object","create","IncomingMessage","prototype","module","exports","get","header","name","TypeError","lc","toLowerCase","headers","referrer","referer","accept","types","apply","arguments","acceptsEncodings","encodings","acceptsCharsets","charsets","acceptsLanguages","languages","range","size","options","defineGetter","query","queryparse","app","querystring","is","arr","Array","isArray","length","i","protocol","proto","connection","encrypted","trust","remoteAddress","index","indexOf","substring","trim","secure","ip","ips","addrs","all","reverse","pop","subdomains","hostname","offset","split","slice","path","pathname","host","val","trimRight","undefined","method","res","status","statusCode","stale","xhr","obj","getter","defineProperty","configurable","enumerable"],"sources":["/Users/linwanjou/Documents/GitHub/SinoPac_Sign_Language/永豐產學/App/node_modules/express/lib/request.js"],"sourcesContent":["/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts');\nvar isIP = require('node:net').isIP;\nvar typeis = require('type-is');\nvar http = require('node:http');\nvar fresh = require('fresh');\nvar parseRange = require('range-parser');\nvar parse = require('parseurl');\nvar proxyaddr = require('proxy-addr');\n\n/**\n * Request prototype.\n * @public\n */\n\nvar req = Object.create(http.IncomingMessage.prototype)\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = req\n\n/**\n * Return request header.\n *\n * The `Referrer` header field is special-cased,\n * both `Referrer` and `Referer` are interchangeable.\n *\n * Examples:\n *\n *     req.get('Content-Type');\n *     // => \"text/plain\"\n *\n *     req.get('content-type');\n *     // => \"text/plain\"\n *\n *     req.get('Something');\n *     // => undefined\n *\n * Aliased as `req.header()`.\n *\n * @param {String} name\n * @return {String}\n * @public\n */\n\nreq.get =\nreq.header = function header(name) {\n  if (!name) {\n    throw new TypeError('name argument is required to req.get');\n  }\n\n  if (typeof name !== 'string') {\n    throw new TypeError('name must be a string to req.get');\n  }\n\n  var lc = name.toLowerCase();\n\n  switch (lc) {\n    case 'referer':\n    case 'referrer':\n      return this.headers.referrer\n        || this.headers.referer;\n    default:\n      return this.headers[lc];\n  }\n};\n\n/**\n * To do: update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('html');\n *     // => \"html\"\n *     req.accepts('text/html');\n *     // => \"text/html\"\n *     req.accepts('json, text');\n *     // => \"json\"\n *     req.accepts('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('image/png');\n *     req.accepts('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     req.accepts(['html', 'json']);\n *     req.accepts('html', 'json');\n *     req.accepts('html, json');\n *     // => \"json\"\n *\n * @param {String|Array} type(s)\n * @return {String|Array|Boolean}\n * @public\n */\n\nreq.accepts = function(){\n  var accept = accepts(this);\n  return accept.types.apply(accept, arguments);\n};\n\n/**\n * Check if the given `encoding`s are accepted.\n *\n * @param {String} ...encoding\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsEncodings = function(){\n  var accept = accepts(this);\n  return accept.encodings.apply(accept, arguments);\n};\n\n/**\n * Check if the given `charset`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...charset\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsCharsets = function(){\n  var accept = accepts(this);\n  return accept.charsets.apply(accept, arguments);\n};\n\n/**\n * Check if the given `lang`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...lang\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsLanguages = function(){\n  var accept = accepts(this);\n  return accept.languages.apply(accept, arguments);\n};\n\n/**\n * Parse Range header field, capping to the given `size`.\n *\n * Unspecified ranges such as \"0-\" require knowledge of your resource length. In\n * the case of a byte range this is of course the total number of bytes. If the\n * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,\n * and `-2` when syntactically invalid.\n *\n * When ranges are returned, the array has a \"type\" property which is the type of\n * range that is required (most commonly, \"bytes\"). Each array element is an object\n * with a \"start\" and \"end\" property for the portion of the range.\n *\n * The \"combine\" option can be set to `true` and overlapping & adjacent ranges\n * will be combined into a single range.\n *\n * NOTE: remember that ranges are inclusive, so for example \"Range: users=0-3\"\n * should respond with 4 users when available, not 3.\n *\n * @param {number} size\n * @param {object} [options]\n * @param {boolean} [options.combine=false]\n * @return {number|array}\n * @public\n */\n\nreq.range = function range(size, options) {\n  var range = this.get('Range');\n  if (!range) return;\n  return parseRange(size, range, options);\n};\n\n/**\n * Parse the query string of `req.url`.\n *\n * This uses the \"query parser\" setting to parse the raw\n * string into an object.\n *\n * @return {String}\n * @api public\n */\n\ndefineGetter(req, 'query', function query(){\n  var queryparse = this.app.get('query parser fn');\n\n  if (!queryparse) {\n    // parsing is disabled\n    return Object.create(null);\n  }\n\n  var querystring = parse(this).query;\n\n  return queryparse(querystring);\n});\n\n/**\n * Check if the incoming request contains the \"Content-Type\"\n * header field, and it contains the given mime `type`.\n *\n * Examples:\n *\n *      // With Content-Type: text/html; charset=utf-8\n *      req.is('html');\n *      req.is('text/html');\n *      req.is('text/*');\n *      // => true\n *\n *      // When Content-Type is application/json\n *      req.is('json');\n *      req.is('application/json');\n *      req.is('application/*');\n *      // => true\n *\n *      req.is('html');\n *      // => false\n *\n * @param {String|Array} types...\n * @return {String|false|null}\n * @public\n */\n\nreq.is = function is(types) {\n  var arr = types;\n\n  // support flattened arguments\n  if (!Array.isArray(types)) {\n    arr = new Array(arguments.length);\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = arguments[i];\n    }\n  }\n\n  return typeis(this, arr);\n};\n\n/**\n * Return the protocol string \"http\" or \"https\"\n * when requested with TLS. When the \"trust proxy\"\n * setting trusts the socket address, the\n * \"X-Forwarded-Proto\" header field will be trusted\n * and used if present.\n *\n * If you're running behind a reverse proxy that\n * supplies https for you this may be enabled.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'protocol', function protocol(){\n  var proto = this.connection.encrypted\n    ? 'https'\n    : 'http';\n  var trust = this.app.get('trust proxy fn');\n\n  if (!trust(this.connection.remoteAddress, 0)) {\n    return proto;\n  }\n\n  // Note: X-Forwarded-Proto is normally only ever a\n  //       single value, but this is to be safe.\n  var header = this.get('X-Forwarded-Proto') || proto\n  var index = header.indexOf(',')\n\n  return index !== -1\n    ? header.substring(0, index).trim()\n    : header.trim()\n});\n\n/**\n * Short-hand for:\n *\n *    req.protocol === 'https'\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'secure', function secure(){\n  return this.protocol === 'https';\n});\n\n/**\n * Return the remote address from the trusted proxy.\n *\n * The is the remote address on the socket unless\n * \"trust proxy\" is set.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'ip', function ip(){\n  var trust = this.app.get('trust proxy fn');\n  return proxyaddr(this, trust);\n});\n\n/**\n * When \"trust proxy\" is set, trusted proxy addresses + client.\n *\n * For example if the value were \"client, proxy1, proxy2\"\n * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\n * \"proxy2\" were trusted.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'ips', function ips() {\n  var trust = this.app.get('trust proxy fn');\n  var addrs = proxyaddr.all(this, trust);\n\n  // reverse the order (to farthest -> closest)\n  // and remove socket address\n  addrs.reverse().pop()\n\n  return addrs\n});\n\n/**\n * Return subdomains as an array.\n *\n * Subdomains are the dot-separated parts of the host before the main domain of\n * the app. By default, the domain of the app is assumed to be the last two\n * parts of the host. This can be changed by setting \"subdomain offset\".\n *\n * For example, if the domain is \"tobi.ferrets.example.com\":\n * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\n * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'subdomains', function subdomains() {\n  var hostname = this.hostname;\n\n  if (!hostname) return [];\n\n  var offset = this.app.get('subdomain offset');\n  var subdomains = !isIP(hostname)\n    ? hostname.split('.').reverse()\n    : [hostname];\n\n  return subdomains.slice(offset);\n});\n\n/**\n * Short-hand for `url.parse(req.url).pathname`.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'path', function path() {\n  return parse(this).pathname;\n});\n\n/**\n * Parse the \"Host\" header field to a host.\n *\n * When the \"trust proxy\" setting trusts the socket\n * address, the \"X-Forwarded-Host\" header field will\n * be trusted.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'host', function host(){\n  var trust = this.app.get('trust proxy fn');\n  var val = this.get('X-Forwarded-Host');\n\n  if (!val || !trust(this.connection.remoteAddress, 0)) {\n    val = this.get('Host');\n  } else if (val.indexOf(',') !== -1) {\n    // Note: X-Forwarded-Host is normally only ever a\n    //       single value, but this is to be safe.\n    val = val.substring(0, val.indexOf(',')).trimRight()\n  }\n\n  return val || undefined;\n});\n\n/**\n * Parse the \"Host\" header field to a hostname.\n *\n * When the \"trust proxy\" setting trusts the socket\n * address, the \"X-Forwarded-Host\" header field will\n * be trusted.\n *\n * @return {String}\n * @api public\n */\n\ndefineGetter(req, 'hostname', function hostname(){\n  var host = this.host;\n\n  if (!host) return;\n\n  // IPv6 literal support\n  var offset = host[0] === '['\n    ? host.indexOf(']') + 1\n    : 0;\n  var index = host.indexOf(':', offset);\n\n  return index !== -1\n    ? host.substring(0, index)\n    : host;\n});\n\n/**\n * Check if the request is fresh, aka\n * Last-Modified or the ETag\n * still match.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'fresh', function(){\n  var method = this.method;\n  var res = this.res\n  var status = res.statusCode\n\n  // GET or HEAD for weak freshness validation only\n  if ('GET' !== method && 'HEAD' !== method) return false;\n\n  // 2xx or 304 as per rfc2616 14.26\n  if ((status >= 200 && status < 300) || 304 === status) {\n    return fresh(this.headers, {\n      'etag': res.get('ETag'),\n      'last-modified': res.get('Last-Modified')\n    })\n  }\n\n  return false;\n});\n\n/**\n * Check if the request is stale, aka\n * \"Last-Modified\" and / or the \"ETag\" for the\n * resource has changed.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'stale', function stale(){\n  return !this.fresh;\n});\n\n/**\n * Check if the request was an _XMLHttpRequest_.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'xhr', function xhr(){\n  var val = this.get('X-Requested-With') || '';\n  return val.toLowerCase() === 'xmlhttprequest';\n});\n\n/**\n * Helper function for creating a getter on an object.\n *\n * @param {Object} obj\n * @param {String} name\n * @param {Function} getter\n * @private\n */\nfunction defineGetter(obj, name, getter) {\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: true,\n    get: getter\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}