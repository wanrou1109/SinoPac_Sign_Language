{"ast":null,"code":"/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar debug = require('debug')('body-parser:raw');\nvar isFinished = require('on-finished').isFinished;\nvar read = require('../read');\nvar typeis = require('type-is');\nvar {\n  normalizeOptions\n} = require('../utils');\n\n/**\n * Module exports.\n */\n\nmodule.exports = raw;\n\n/**\n * Create a middleware to parse raw bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nfunction raw(options) {\n  var {\n    inflate,\n    limit,\n    verify,\n    shouldParse\n  } = normalizeOptions(options, 'application/octet-stream');\n  function parse(buf) {\n    return buf;\n  }\n  return function rawParser(req, res, next) {\n    if (isFinished(req)) {\n      debug('body already parsed');\n      next();\n      return;\n    }\n    if (!('body' in req)) {\n      req.body = undefined;\n    }\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body');\n      next();\n      return;\n    }\n    debug('content-type %j', req.headers['content-type']);\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing');\n      next();\n      return;\n    }\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: null,\n      inflate,\n      limit,\n      verify\n    });\n  };\n}","map":{"version":3,"names":["debug","require","isFinished","read","typeis","normalizeOptions","module","exports","raw","options","inflate","limit","verify","shouldParse","parse","buf","rawParser","req","res","next","body","undefined","hasBody","headers","encoding"],"sources":["/Users/linwanjou/Documents/GitHub/SinoPac_Sign_Language/永豐產學/App/node_modules/body-parser/lib/types/raw.js"],"sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('body-parser:raw')\nvar isFinished = require('on-finished').isFinished\nvar read = require('../read')\nvar typeis = require('type-is')\nvar { normalizeOptions } = require('../utils')\n\n/**\n * Module exports.\n */\n\nmodule.exports = raw\n\n/**\n * Create a middleware to parse raw bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nfunction raw (options) {\n  var { inflate, limit, verify, shouldParse } = normalizeOptions(options, 'application/octet-stream')\n\n  function parse (buf) {\n    return buf\n  }\n\n  return function rawParser (req, res, next) {\n    if (isFinished(req)) {\n      debug('body already parsed')\n      next()\n      return\n    }\n\n    if (!('body' in req)) {\n      req.body = undefined\n    }\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body')\n      next()\n      return\n    }\n\n    debug('content-type %j', req.headers['content-type'])\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing')\n      next()\n      return\n    }\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: null,\n      inflate,\n      limit,\n      verify\n    })\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,iBAAiB,CAAC;AAC/C,IAAIC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC,CAACC,UAAU;AAClD,IAAIC,IAAI,GAAGF,OAAO,CAAC,SAAS,CAAC;AAC7B,IAAIG,MAAM,GAAGH,OAAO,CAAC,SAAS,CAAC;AAC/B,IAAI;EAAEI;AAAiB,CAAC,GAAGJ,OAAO,CAAC,UAAU,CAAC;;AAE9C;AACA;AACA;;AAEAK,MAAM,CAACC,OAAO,GAAGC,GAAG;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,GAAGA,CAAEC,OAAO,EAAE;EACrB,IAAI;IAAEC,OAAO;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAY,CAAC,GAAGR,gBAAgB,CAACI,OAAO,EAAE,0BAA0B,CAAC;EAEnG,SAASK,KAAKA,CAAEC,GAAG,EAAE;IACnB,OAAOA,GAAG;EACZ;EAEA,OAAO,SAASC,SAASA,CAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAE;IACzC,IAAIjB,UAAU,CAACe,GAAG,CAAC,EAAE;MACnBjB,KAAK,CAAC,qBAAqB,CAAC;MAC5BmB,IAAI,CAAC,CAAC;MACN;IACF;IAEA,IAAI,EAAE,MAAM,IAAIF,GAAG,CAAC,EAAE;MACpBA,GAAG,CAACG,IAAI,GAAGC,SAAS;IACtB;;IAEA;IACA,IAAI,CAACjB,MAAM,CAACkB,OAAO,CAACL,GAAG,CAAC,EAAE;MACxBjB,KAAK,CAAC,iBAAiB,CAAC;MACxBmB,IAAI,CAAC,CAAC;MACN;IACF;IAEAnB,KAAK,CAAC,iBAAiB,EAAEiB,GAAG,CAACM,OAAO,CAAC,cAAc,CAAC,CAAC;;IAErD;IACA,IAAI,CAACV,WAAW,CAACI,GAAG,CAAC,EAAE;MACrBjB,KAAK,CAAC,cAAc,CAAC;MACrBmB,IAAI,CAAC,CAAC;MACN;IACF;;IAEA;IACAhB,IAAI,CAACc,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEL,KAAK,EAAEd,KAAK,EAAE;MACjCwB,QAAQ,EAAE,IAAI;MACdd,OAAO;MACPC,KAAK;MACLC;IACF,CAAC,CAAC;EACJ,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}