{"ast":null,"code":"/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar debug = require('debug')('body-parser:text');\nvar isFinished = require('on-finished').isFinished;\nvar read = require('../read');\nvar typeis = require('type-is');\nvar {\n  getCharset,\n  normalizeOptions\n} = require('../utils');\n\n/**\n * Module exports.\n */\n\nmodule.exports = text;\n\n/**\n * Create a middleware to parse text bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nfunction text(options) {\n  var {\n    inflate,\n    limit,\n    verify,\n    shouldParse\n  } = normalizeOptions(options, 'text/plain');\n  var defaultCharset = options?.defaultCharset || 'utf-8';\n  function parse(buf) {\n    return buf;\n  }\n  return function textParser(req, res, next) {\n    if (isFinished(req)) {\n      debug('body already parsed');\n      next();\n      return;\n    }\n    if (!('body' in req)) {\n      req.body = undefined;\n    }\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body');\n      next();\n      return;\n    }\n    debug('content-type %j', req.headers['content-type']);\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing');\n      next();\n      return;\n    }\n\n    // get charset\n    var charset = getCharset(req) || defaultCharset;\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: charset,\n      inflate,\n      limit,\n      verify\n    });\n  };\n}","map":{"version":3,"names":["debug","require","isFinished","read","typeis","getCharset","normalizeOptions","module","exports","text","options","inflate","limit","verify","shouldParse","defaultCharset","parse","buf","textParser","req","res","next","body","undefined","hasBody","headers","charset","encoding"],"sources":["/Users/linwanjou/Documents/GitHub/SinoPac_Sign_Language/永豐產學/App/node_modules/body-parser/lib/types/text.js"],"sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('body-parser:text')\nvar isFinished = require('on-finished').isFinished\nvar read = require('../read')\nvar typeis = require('type-is')\nvar { getCharset, normalizeOptions } = require('../utils')\n\n/**\n * Module exports.\n */\n\nmodule.exports = text\n\n/**\n * Create a middleware to parse text bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nfunction text (options) {\n  var { inflate, limit, verify, shouldParse } = normalizeOptions(options, 'text/plain')\n\n  var defaultCharset = options?.defaultCharset || 'utf-8'\n\n  function parse (buf) {\n    return buf\n  }\n\n  return function textParser (req, res, next) {\n    if (isFinished(req)) {\n      debug('body already parsed')\n      next()\n      return\n    }\n\n    if (!('body' in req)) {\n      req.body = undefined\n    }\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body')\n      next()\n      return\n    }\n\n    debug('content-type %j', req.headers['content-type'])\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing')\n      next()\n      return\n    }\n\n    // get charset\n    var charset = getCharset(req) || defaultCharset\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: charset,\n      inflate,\n      limit,\n      verify\n    })\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,kBAAkB,CAAC;AAChD,IAAIC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC,CAACC,UAAU;AAClD,IAAIC,IAAI,GAAGF,OAAO,CAAC,SAAS,CAAC;AAC7B,IAAIG,MAAM,GAAGH,OAAO,CAAC,SAAS,CAAC;AAC/B,IAAI;EAAEI,UAAU;EAAEC;AAAiB,CAAC,GAAGL,OAAO,CAAC,UAAU,CAAC;;AAE1D;AACA;AACA;;AAEAM,MAAM,CAACC,OAAO,GAAGC,IAAI;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,IAAIA,CAAEC,OAAO,EAAE;EACtB,IAAI;IAAEC,OAAO;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAY,CAAC,GAAGR,gBAAgB,CAACI,OAAO,EAAE,YAAY,CAAC;EAErF,IAAIK,cAAc,GAAGL,OAAO,EAAEK,cAAc,IAAI,OAAO;EAEvD,SAASC,KAAKA,CAAEC,GAAG,EAAE;IACnB,OAAOA,GAAG;EACZ;EAEA,OAAO,SAASC,UAAUA,CAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAE;IAC1C,IAAInB,UAAU,CAACiB,GAAG,CAAC,EAAE;MACnBnB,KAAK,CAAC,qBAAqB,CAAC;MAC5BqB,IAAI,CAAC,CAAC;MACN;IACF;IAEA,IAAI,EAAE,MAAM,IAAIF,GAAG,CAAC,EAAE;MACpBA,GAAG,CAACG,IAAI,GAAGC,SAAS;IACtB;;IAEA;IACA,IAAI,CAACnB,MAAM,CAACoB,OAAO,CAACL,GAAG,CAAC,EAAE;MACxBnB,KAAK,CAAC,iBAAiB,CAAC;MACxBqB,IAAI,CAAC,CAAC;MACN;IACF;IAEArB,KAAK,CAAC,iBAAiB,EAAEmB,GAAG,CAACM,OAAO,CAAC,cAAc,CAAC,CAAC;;IAErD;IACA,IAAI,CAACX,WAAW,CAACK,GAAG,CAAC,EAAE;MACrBnB,KAAK,CAAC,cAAc,CAAC;MACrBqB,IAAI,CAAC,CAAC;MACN;IACF;;IAEA;IACA,IAAIK,OAAO,GAAGrB,UAAU,CAACc,GAAG,CAAC,IAAIJ,cAAc;;IAE/C;IACAZ,IAAI,CAACgB,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEL,KAAK,EAAEhB,KAAK,EAAE;MACjC2B,QAAQ,EAAED,OAAO;MACjBf,OAAO;MACPC,KAAK;MACLC;IACF,CAAC,CAAC;EACJ,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}