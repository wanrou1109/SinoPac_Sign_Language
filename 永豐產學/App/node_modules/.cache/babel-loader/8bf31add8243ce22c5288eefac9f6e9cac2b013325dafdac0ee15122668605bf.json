{"ast":null,"code":"var _jsxFileName = \"/Users/johnsonleong/Desktop/DS/DS/Grade project/SinoPac_Sign_Language/\\u6C38\\u8C50\\u7522\\u5B78/App/src/components/SignLanguageRecognition.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as handsModule from \"@mediapipe/hands\";\nimport { drawConnectors, drawLandmarks } from \"@mediapipe/hands\";\nimport { Camera } from \"@mediapipe/camera_utils\";\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAppContext } from '../contexts/AppContext.js';\nimport Header from './Header.js';\nimport '../styles/SignLanguageRecognition.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignLanguageRecognition = () => {\n  _s();\n  var _location$state;\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    addMessage,\n    editMessage,\n    setRecognitionStatus,\n    recognitionStatus,\n    setConversations\n  } = useAppContext();\n  const [isRecording, setIsRecording] = useState(false);\n  const [result, setResult] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const recordedChunksRef = useRef([]);\n  const streamRef = useRef(null);\n  const recognitionIntervalRef = useRef(null);\n  const lastRecognizedTextRef = useRef('');\n  const resultBoxRef = useRef(null);\n  const keypointsBuffer = useRef([]);\n  const editMessageID = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.messageID;\n  useEffect(() => {\n    const setupCamera = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        streamRef.current = stream;\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n        // MediaPipe Hands integration\n        const hands = new handsModule.Hands({\n          locateFile: file => `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`\n        });\n        hands.setOptions({\n          maxNumHands: 1,\n          modelComplexity: 1,\n          minDetectionConfidence: 0.7,\n          minTrackingConfidence: 0.5\n        });\n        hands.onResults(results => {\n          if (results.multiHandLandmarks && results.multiHandLandmarks.length > 0) {\n            var _results$multiHandedn, _results$multiHandedn2;\n            const hand0 = results.multiHandLandmarks[0];\n            const handedness0 = ((_results$multiHandedn = results.multiHandedness) === null || _results$multiHandedn === void 0 ? void 0 : (_results$multiHandedn2 = _results$multiHandedn[0]) === null || _results$multiHandedn2 === void 0 ? void 0 : _results$multiHandedn2.label) === 'Left' ? [1, 0] : [0, 1];\n            const flat0 = hand0.flatMap(pt => {\n              var _pt$visibility;\n              return [pt.x, pt.y, pt.z, (_pt$visibility = pt.visibility) !== null && _pt$visibility !== void 0 ? _pt$visibility : 1.0, ...handedness0];\n            });\n            let flat = flat0;\n\n            // 若只有一隻手，補上 21 個全 0 的點（長度為 126）\n            if (flat.length < 126) {\n              const padding = Array(21 * 6).fill(0);\n              flat = flat.concat(padding);\n            }\n            keypointsBuffer.current.push(flat);\n            if (keypointsBuffer.current.length > 30) {\n              keypointsBuffer.current.shift();\n            }\n            window.keypointsArray = [...keypointsBuffer.current];\n          } else {\n            keypointsBuffer.current = [];\n            window.keypointsArray = [];\n          }\n        });\n        const camera = new Camera(videoRef.current, {\n          onFrame: async () => {\n            await hands.send({\n              image: videoRef.current\n            });\n          },\n          width: 640,\n          height: 480\n        });\n        camera.start();\n      } catch (error) {\n        console.error('鏡頭開啟失敗:', error);\n        alert('無法開啟鏡頭，請確認已授予攝影機權限。');\n      }\n    };\n    setupCamera();\n    return () => {\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (recognitionIntervalRef.current) {\n        clearInterval(recognitionIntervalRef.current);\n        recognitionIntervalRef.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    console.log('開始測試與後端的連接...');\n    fetch('/api/test').then(response => {\n      if (!response.ok) {\n        throw new Error(`後端錯誤：${response.status}`);\n      }\n      return response.json();\n    }).then(data => console.log('後端連接測試成功:', data)).catch(error => console.error('後端連接錯誤:', error));\n  }, []);\n\n  // 即時辨識\n  const startPeriodicRecognition = () => {\n    recognitionIntervalRef.current = setInterval(() => {\n      if (!isProcessing) {\n        captureAndRecognize();\n      }\n    }, 2000);\n  };\n  const captureAndRecognize = async () => {\n    if (!videoRef.current || !streamRef.current) return;\n    try {\n      setIsProcessing(true);\n\n      // canvas -> 捕捉當前影片幀\n      const canvas = document.createElement('canvas');\n      const videoElement = videoRef.current;\n      canvas.width = videoElement.videoWidth;\n      canvas.height = videoElement.videoHeight;\n\n      // 影片幀繪製到 canvas\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n\n      // canvas 轉成 blob\n      // const blob = await new Promise((resolve) => {\n      //     canvas.toBlob(resolve, 'image/jpeg', 0.9);\n      // });\n\n      // if (!blob) {\n      //     throw new Error('無法創建影像數據');\n      // }\n\n      // 傳送到後端\n      await sendFrameToRecognition();\n    } catch (err) {\n      console.error('處理影片幀時發生錯誤：', err);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const sendFrameToRecognition = async () => {\n    try {\n      const keypointsArray = window.keypointsArray;\n      if (!keypointsArray || keypointsArray.length !== 30) {\n        throw new Error('keypointsArray 資料不足，需 30 幀');\n      }\n      const totalLength = keypointsArray.reduce((sum, row) => sum + row.length, 0);\n      if (totalLength !== 30 * 126) {\n        throw new Error(`格式錯誤，應為 (30, 126)，目前為 (30, ${totalLength / 30})`);\n      }\n      console.log('發送節點資料進行辨識...');\n      const response = await fetch('/api/sign-language-recognition/frame', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          keypoints: keypointsArray\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`伺服器錯誤： ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('辨識結果：', data);\n      if (data.success && data.text) {\n        updateRecognizedText(data.text);\n      }\n    } catch (err) {\n      console.error('發送節點到後端時發生錯誤：', err);\n    }\n  };\n  const updateRecognizedText = newText => {\n    if (!newText || newText.trim() === '') return;\n\n    // 若為「請打下一個字」，只顯示，不累加\n    if (newText === \"請打下一個字\") {\n      // 僅更新畫面顯示，不更新 lastRecognizedTextRef 或 result 狀態\n      if (resultBoxRef.current) {\n        resultBoxRef.current.innerText = \"請打下一個字\";\n      }\n      return;\n    }\n    setResult(prevText => {\n      const lastText = lastRecognizedTextRef.current;\n      if (newText === lastText) {\n        return prevText;\n      }\n      if (lastText && (newText.includes(lastText) || lastText.includes(newText))) {\n        const updatedText = newText.length > lastText.length ? newText : lastText;\n        lastRecognizedTextRef.current = updatedText;\n        if (!prevText) return updatedText;\n        const words = prevText.split(' ');\n        const lastWords = words.slice(Math.max(0, words.length - 5)).join(' ');\n        if (updatedText.startsWith(lastWords)) {\n          const newContent = prevText + ' ' + updatedText.substring(lastWords.length).trim();\n          return newContent;\n        } else {\n          return prevText + ' ' + updatedText;\n        }\n      }\n      lastRecognizedTextRef.current = newText;\n      const newContent = prevText ? prevText + ' ' + newText : newText;\n      return newContent;\n    });\n  };\n\n  // 原錄製功能保留、新增即時辨識\n  const handleStartRecording = () => {\n    if (!streamRef.current) {\n      alert('鏡頭尚未準備就緒');\n      return;\n    }\n    setResult('');\n    lastRecognizedTextRef.current = '';\n    recordedChunksRef.current = [];\n    const mediaRecorder = new MediaRecorder(streamRef.current, {\n      mimeType: 'video/webm'\n    });\n    mediaRecorder.ondataavailable = event => {\n      if (event.data.size > 0) {\n        recordedChunksRef.current.push(event.data);\n        console.log(`收到錄製片段: ${event.data.size} bytes`);\n      }\n    };\n    mediaRecorder.onstop = async () => {\n      if (recognitionIntervalRef.current) {\n        clearInterval(recognitionIntervalRef.current);\n        recognitionIntervalRef.current = null;\n      }\n      try {\n        const blob = new Blob(recordedChunksRef.current, {\n          type: 'video/webm'\n        });\n        if (blob.size === 0) throw new Error('視訊檔案為空');\n\n        // await uploadVideoToServer(blob); // 上傳完整影片\n\n        setTimeout(() => {\n          setRecognitionStatus('idle');\n          if (editMessageID) {\n            editMessage(editMessageID, result);\n          } else {\n            addMessage(result, 'customer');\n          }\n          navigate('/conversation');\n        }, 1000);\n      } catch (err) {\n        console.error('處理錄製錯誤:', err);\n        alert('辨識失敗: ' + err.message);\n        setRecognitionStatus('idle');\n      }\n    };\n    mediaRecorderRef.current = mediaRecorder;\n    mediaRecorder.start(1000);\n    setIsRecording(true);\n    setRecognitionStatus('recording');\n    startPeriodicRecognition();\n  };\n  const handleStopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n    }\n    if (recognitionIntervalRef.current) {\n      clearInterval(recognitionIntervalRef.current);\n      recognitionIntervalRef.current = null;\n    }\n    setIsRecording(false);\n    setRecognitionStatus('processing');\n  };\n\n  // 整段影片上傳後端功能\n  /**\n  const uploadVideoToServer = async (videoBlob) => {\n      const formData = new FormData();\n      formData.append('video', videoBlob, 'sign-language-recording.webm');\n       console.log('開始上傳視訊檔案到 /api/upload/video');\n       const response = await fetch('http://localhost:5000/api/upload/video', {\n          method: 'POST',\n          body: formData,\n          mode: 'cors',\n      });\n       if (!response.ok) {\n          const text = await response.text();\n          throw new Error(`上傳失敗: ${text}`);\n      }\n       const data = await response.json();\n      console.log('上傳成功:', data);\n       await analyzeLatestVideo();\n      return data;\n  };\n  */\n\n  const analyzeLatestVideo = async () => {\n    try {\n      setTimeout(async () => {\n        try {\n          console.log('呼叫 /api/analyze_latest 進行辨識...');\n          const response = await fetch('/api/analyze_latest');\n          if (!response.ok) {\n            throw new Error(`網路回應不正常: ${response.status}`);\n          }\n          const data = await response.json();\n          console.log('手語辨識結果：', data);\n          if (data.result && data.result.length > 0) {\n            var _location$state2;\n            const recognizedText = data.result.join(' ');\n            // setResult(recognizedText);\n            const messageID = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.messageID;\n            if (messageID) {\n              editMessage(messageID, recognizedText);\n            } else {\n              const newMessage = {\n                id: Date.now.toString(),\n                text: recognizedText,\n                sender: 'customer',\n                timestamp: new Date().toString()\n              };\n              setConversations(prev => [...prev, newMessage]);\n            }\n            navigate('/conversation');\n          } else {\n            setResult('無法辨識手語內容');\n          }\n        } catch (error) {\n          console.error('辨識結果時發生錯誤：', error);\n          setResult('辨識過程發生錯誤，請重試');\n        }\n      }, 1500);\n    } catch (error) {\n      console.error('辨識 API 呼叫失敗:', error);\n      setResult('辨識過程發生錯誤，請重試');\n    }\n  };\n  const handleBack = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n    }\n    if (recognitionIntervalRef.current) {\n      clearInterval(recognitionIntervalRef.current);\n      recognitionIntervalRef.current = null;\n    }\n    setIsRecording(false);\n    setRecognitionStatus('idle');\n    navigate('/conversation');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sign-language-recognition-screen\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      showBackButton: true,\n      onBack: handleBack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recognition-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          autoPlay: true,\n          playsInline: true,\n          muted: true,\n          className: `${isRecording ? 'recording' : ''} mirror-video`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 21\n        }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"processing-indicator\",\n          children: \"\\u8FA8\\u8B58\\u4E2D...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `recognition-result ${isRecording ? 'visible' : 'hidden'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u5373\\u6642\\u8FA8\\u8B58\\u7D50\\u679C\\uFF1A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: resultBoxRef,\n          className: `result-text ${result ? 'has-content' : ''}`,\n          children: result || '等待手語辨識...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"recognized-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\u76EE\\u524D\\u5DF2\\u8F38\\u5165\\uFF1A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 25\n          }, this), \" \", result]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 21\n        }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"live-indicator\",\n          children: \"\\u5373\\u6642\\u66F4\\u65B0\\u4E2D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-bar\",\n      children: !isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"record-button\",\n        onClick: handleStartRecording,\n        disabled: recognitionStatus === 'processing',\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-inner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"record-button recording-active\",\n        onClick: handleStopRecording,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-inner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 395,\n    columnNumber: 9\n  }, this);\n};\n_s(SignLanguageRecognition, \"g9hMvITrDunvEa/b/xAByDgsihg=\", false, function () {\n  return [useNavigate, useLocation, useAppContext];\n});\n_c = SignLanguageRecognition;\nexport default SignLanguageRecognition;\nvar _c;\n$RefreshReg$(_c, \"SignLanguageRecognition\");","map":{"version":3,"names":["React","useState","useEffect","useRef","handsModule","drawConnectors","drawLandmarks","Camera","useNavigate","useLocation","useAppContext","Header","jsxDEV","_jsxDEV","SignLanguageRecognition","_s","_location$state","navigate","location","addMessage","editMessage","setRecognitionStatus","recognitionStatus","setConversations","isRecording","setIsRecording","result","setResult","isProcessing","setIsProcessing","videoRef","mediaRecorderRef","recordedChunksRef","streamRef","recognitionIntervalRef","lastRecognizedTextRef","resultBoxRef","keypointsBuffer","editMessageID","state","messageID","setupCamera","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","hands","Hands","locateFile","file","setOptions","maxNumHands","modelComplexity","minDetectionConfidence","minTrackingConfidence","onResults","results","multiHandLandmarks","length","_results$multiHandedn","_results$multiHandedn2","hand0","handedness0","multiHandedness","label","flat0","flatMap","pt","_pt$visibility","x","y","z","visibility","flat","padding","Array","fill","concat","push","shift","window","keypointsArray","camera","onFrame","send","image","width","height","start","error","console","alert","getTracks","forEach","track","stop","clearInterval","log","fetch","then","response","ok","Error","status","json","data","catch","startPeriodicRecognition","setInterval","captureAndRecognize","canvas","document","createElement","videoElement","videoWidth","videoHeight","ctx","getContext","drawImage","sendFrameToRecognition","err","totalLength","reduce","sum","row","method","headers","body","JSON","stringify","keypoints","success","text","updateRecognizedText","newText","trim","innerText","prevText","lastText","includes","updatedText","words","split","lastWords","slice","Math","max","join","startsWith","newContent","substring","handleStartRecording","mediaRecorder","MediaRecorder","mimeType","ondataavailable","event","size","onstop","blob","Blob","type","setTimeout","message","handleStopRecording","analyzeLatestVideo","_location$state2","recognizedText","newMessage","id","Date","now","toString","sender","timestamp","prev","handleBack","className","children","showBackButton","onBack","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","muted","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/johnsonleong/Desktop/DS/DS/Grade project/SinoPac_Sign_Language/永豐產學/App/src/components/SignLanguageRecognition.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport * as handsModule from \"@mediapipe/hands\";\nimport { drawConnectors, drawLandmarks } from \"@mediapipe/hands\";\nimport { Camera } from \"@mediapipe/camera_utils\";\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAppContext } from '../contexts/AppContext.js';\nimport Header from './Header.js';\nimport '../styles/SignLanguageRecognition.css';\n\nconst SignLanguageRecognition = () => {\n    const navigate = useNavigate();\n    const location = useLocation();\n    const { addMessage, editMessage, setRecognitionStatus, recognitionStatus, setConversations } = useAppContext();\n    const [ isRecording, setIsRecording ] = useState(false);\n    const [ result, setResult ] = useState('');\n    const [ isProcessing, setIsProcessing ] = useState(false);\n    const videoRef = useRef(null);\n    const mediaRecorderRef = useRef(null);\n    const recordedChunksRef = useRef([]);\n    const streamRef = useRef(null);\n    const recognitionIntervalRef = useRef(null);\n    const lastRecognizedTextRef = useRef('');\n    const resultBoxRef = useRef(null);\n    const keypointsBuffer = useRef([]);\n    const editMessageID = location.state?.messageID;\n\n    useEffect(() => {\n        const setupCamera = async () => {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n                streamRef.current = stream;\n                if (videoRef.current) {\n                    videoRef.current.srcObject = stream;\n                }\n                // MediaPipe Hands integration\n                const hands = new handsModule.Hands({\n                    locateFile: (file) =>\n                        `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`,\n                });\n\n                hands.setOptions({\n                    maxNumHands: 1,\n                    modelComplexity: 1,\n                    minDetectionConfidence: 0.7,\n                    minTrackingConfidence: 0.5,\n                });\n\n                hands.onResults((results) => {\n                    if (results.multiHandLandmarks && results.multiHandLandmarks.length > 0) {\n                        const hand0 = results.multiHandLandmarks[0];\n                        const handedness0 = results.multiHandedness?.[0]?.label === 'Left' ? [1, 0] : [0, 1];\n                        const flat0 = hand0.flatMap(pt => [pt.x, pt.y, pt.z, pt.visibility ?? 1.0, ...handedness0]);\n\n                        let flat = flat0;\n\n                        // 若只有一隻手，補上 21 個全 0 的點（長度為 126）\n                        if (flat.length < 126) {\n                            const padding = Array(21 * 6).fill(0);\n                            flat = flat.concat(padding);\n                        }\n\n                        keypointsBuffer.current.push(flat);\n\n                        if (keypointsBuffer.current.length > 30) {\n                            keypointsBuffer.current.shift();\n                        }\n\n                        window.keypointsArray = [...keypointsBuffer.current];\n                    } else {\n                        keypointsBuffer.current = [];\n                        window.keypointsArray = [];\n                    }\n                });\n\n                const camera = new Camera(videoRef.current, {\n                    onFrame: async () => {\n                        await hands.send({ image: videoRef.current });\n                    },\n                    width: 640,\n                    height: 480,\n                });\n                camera.start();\n            } catch (error) {\n                console.error('鏡頭開啟失敗:', error);\n                alert('無法開啟鏡頭，請確認已授予攝影機權限。');\n            }\n        };\n\n        setupCamera();\n\n        return () => {\n            if (streamRef.current) {\n                streamRef.current.getTracks().forEach(track => track.stop());\n            }\n\n            if (recognitionIntervalRef.current) {\n                clearInterval(recognitionIntervalRef.current);\n                recognitionIntervalRef.current = null;\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        console.log('開始測試與後端的連接...');\n        fetch('/api/test')\n        .then(response => {\n            if (!response.ok) {\n            throw new Error(`後端錯誤：${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => console.log('後端連接測試成功:', data))\n        .catch(error => console.error('後端連接錯誤:', error));\n    }, []);\n\n    // 即時辨識\n    const startPeriodicRecognition = () => {\n        recognitionIntervalRef.current = setInterval(() => {\n            if (!isProcessing) {\n                captureAndRecognize();\n            }\n        }, 2000);\n    };\n\n    const captureAndRecognize = async () => {\n        if (!videoRef.current || !streamRef.current) return;\n\n        try {\n            setIsProcessing(true);\n\n            // canvas -> 捕捉當前影片幀\n            const canvas = document.createElement('canvas');\n            const videoElement = videoRef.current;\n\n            canvas.width = videoElement.videoWidth;\n            canvas.height = videoElement.videoHeight;\n\n            // 影片幀繪製到 canvas\n            const ctx = canvas.getContext('2d');\n            ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n\n            // canvas 轉成 blob\n            // const blob = await new Promise((resolve) => {\n            //     canvas.toBlob(resolve, 'image/jpeg', 0.9);\n            // });\n\n            // if (!blob) {\n            //     throw new Error('無法創建影像數據');\n            // }\n\n            // 傳送到後端\n            await sendFrameToRecognition();\n        } catch (err) {\n            console.error('處理影片幀時發生錯誤：', err);\n        } finally {\n            setIsProcessing(false);\n        }\n    };\n\n    const sendFrameToRecognition = async () => {\n        try {\n            const keypointsArray = window.keypointsArray;\n            if (!keypointsArray || keypointsArray.length !== 30) {\n                throw new Error('keypointsArray 資料不足，需 30 幀');\n            }\n\n            const totalLength = keypointsArray.reduce((sum, row) => sum + row.length, 0);\n            if (totalLength !== 30 * 126) {\n                throw new Error(`格式錯誤，應為 (30, 126)，目前為 (30, ${totalLength / 30})`);\n            }\n\n            console.log('發送節點資料進行辨識...');\n\n            const response = await fetch('/api/sign-language-recognition/frame', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ keypoints: keypointsArray })\n            });\n\n            if (!response.ok) {\n                throw new Error(`伺服器錯誤： ${response.status}`);\n            }\n\n            const data = await response.json();\n            console.log('辨識結果：', data);\n\n            if (data.success && data.text) {\n                updateRecognizedText(data.text);\n            }\n        } catch (err) {\n            console.error('發送節點到後端時發生錯誤：', err);\n        }\n    };\n\n    const updateRecognizedText = (newText) => {\n        if (!newText || newText.trim() === '') return;\n\n        // 若為「請打下一個字」，只顯示，不累加\n        if (newText === \"請打下一個字\") {\n            // 僅更新畫面顯示，不更新 lastRecognizedTextRef 或 result 狀態\n            if (resultBoxRef.current) {\n                resultBoxRef.current.innerText = \"請打下一個字\";\n            }\n            return;\n        }\n\n        setResult(prevText => {\n            const lastText = lastRecognizedTextRef.current;\n\n            if (newText === lastText) {\n                return prevText;\n            }\n\n            if (lastText && (newText.includes(lastText) || lastText.includes(newText))) {\n                const updatedText = newText.length > lastText.length ? newText : lastText;\n                lastRecognizedTextRef.current = updatedText;\n                if (!prevText) return updatedText;\n                const words = prevText.split(' ');\n                const lastWords = words.slice(Math.max(0, words.length - 5)).join(' ');\n\n                if (updatedText.startsWith(lastWords)) {\n                    const newContent = prevText + ' ' + updatedText.substring(lastWords.length).trim();\n                    return newContent;\n                } else {\n                    return prevText + ' ' + updatedText;\n                }\n            }\n\n            lastRecognizedTextRef.current = newText;\n            const newContent = prevText ? prevText + ' ' + newText : newText;\n            return newContent;\n        });\n    };\n\n    // 原錄製功能保留、新增即時辨識\n    const handleStartRecording = () => {\n        if (!streamRef.current) {\n            alert('鏡頭尚未準備就緒');\n            return;\n        }\n\n        setResult('');\n        lastRecognizedTextRef.current = '';\n        recordedChunksRef.current = [];\n\n        const mediaRecorder = new MediaRecorder(streamRef.current, { mimeType: 'video/webm' });\n\n        mediaRecorder.ondataavailable = event => {\n            if (event.data.size > 0) {\n                recordedChunksRef.current.push(event.data);\n                console.log(`收到錄製片段: ${event.data.size} bytes`);\n            }\n        };\n\n        mediaRecorder.onstop = async () => {\n            if (recognitionIntervalRef.current) {\n                clearInterval(recognitionIntervalRef.current);\n                recognitionIntervalRef.current = null;\n            }\n            try {\n                const blob = new Blob(recordedChunksRef.current, { type: 'video/webm' });\n                if (blob.size === 0) throw new Error('視訊檔案為空');\n\n                // await uploadVideoToServer(blob); // 上傳完整影片\n\n                setTimeout(() => {\n                    setRecognitionStatus('idle');\n                    if (editMessageID) {\n                        editMessage(editMessageID, result);\n                    } else {\n                        addMessage(result, 'customer');\n                    }\n                    navigate('/conversation');\n                }, 1000);\n            } catch (err) {\n                console.error('處理錄製錯誤:', err);\n                alert('辨識失敗: ' + err.message);\n                setRecognitionStatus('idle');\n            }\n        };\n\n        mediaRecorderRef.current = mediaRecorder;\n        mediaRecorder.start(1000);\n        setIsRecording(true);\n        setRecognitionStatus('recording');\n        startPeriodicRecognition();\n    };\n\n    const handleStopRecording = () => {\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n            mediaRecorderRef.current.stop();\n        }\n\n        if (recognitionIntervalRef.current) {\n            clearInterval(recognitionIntervalRef.current);\n            recognitionIntervalRef.current = null;\n        }\n\n        setIsRecording(false);\n        setRecognitionStatus('processing');\n    };\n\n    // 整段影片上傳後端功能\n    /**\n    const uploadVideoToServer = async (videoBlob) => {\n        const formData = new FormData();\n        formData.append('video', videoBlob, 'sign-language-recording.webm');\n\n        console.log('開始上傳視訊檔案到 /api/upload/video');\n\n        const response = await fetch('http://localhost:5000/api/upload/video', {\n            method: 'POST',\n            body: formData,\n            mode: 'cors',\n        });\n\n        if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`上傳失敗: ${text}`);\n        }\n\n        const data = await response.json();\n        console.log('上傳成功:', data);\n\n        await analyzeLatestVideo();\n        return data;\n    };\n    */\n    \n    const analyzeLatestVideo = async () => {\n        try {\n            setTimeout(async () => {\n                try {\n                    console.log('呼叫 /api/analyze_latest 進行辨識...');\n                    const response = await fetch('/api/analyze_latest');\n\n                    if (!response.ok) {\n                        throw new Error(`網路回應不正常: ${response.status}`);\n                    }\n                    \n                    const data = await response.json();\n                    console.log('手語辨識結果：', data);\n\n                    if (data.result && data.result.length > 0) {\n                        const recognizedText = data.result.join(' ');\n                        // setResult(recognizedText);\n                        const messageID = location.state?.messageID;\n                        \n                        if (messageID) {\n                            editMessage(messageID, recognizedText);\n                        } else {\n                            const newMessage = {\n                                id: Date.now.toString(),\n                                text: recognizedText,\n                                sender: 'customer',\n                                timestamp: new Date().toString() \n                            };\n                            setConversations(prev => [...prev, newMessage]);\n                        }\n\n                        navigate('/conversation');\n                    } else {\n                        setResult('無法辨識手語內容');\n                    }\n                } catch (error) {\n                    console.error('辨識結果時發生錯誤：', error);\n                    setResult('辨識過程發生錯誤，請重試');\n                }\n            }, 1500);        \n        } catch (error) {\n            console.error('辨識 API 呼叫失敗:', error);\n            setResult('辨識過程發生錯誤，請重試');\n        }\n    };\n\n\n    const handleBack = () => {\n        if (mediaRecorderRef.current && isRecording) {\n            mediaRecorderRef.current.stop();\n        }\n\n        if (recognitionIntervalRef.current) {\n            clearInterval(recognitionIntervalRef.current);\n            recognitionIntervalRef.current = null;\n        }\n        \n        setIsRecording(false);\n        setRecognitionStatus('idle');\n        navigate('/conversation');\n    };\n\n    return (\n        <div className='sign-language-recognition-screen'>\n            <Header showBackButton={true} onBack={handleBack}/>\n            <div className='recognition-container'>\n                <div className='video-container'>\n                    <video\n                        ref={videoRef}\n                        autoPlay\n                        playsInline\n                        muted\n                        className={`${isRecording ? 'recording' : ''} mirror-video`}\n                    />\n                    {isProcessing && (\n                        <div className='processing-indicator'>\n                            辨識中...\n                        </div>\n                    )}\n                </div>\n\n                <div className={`recognition-result ${isRecording ? 'visible' : 'hidden'}`}>\n                    <h3>即時辨識結果：</h3>\n                    <div\n                        ref={resultBoxRef}\n                        className={`result-text ${result ? 'has-content' : ''}`}\n                    >\n                        {result || '等待手語辨識...'}\n                    </div>\n                    <div className=\"recognized-summary\">\n                        <strong>目前已輸入：</strong> {result}\n                    </div>\n                    {isRecording && <div className=\"live-indicator\">即時更新中</div>}\n                </div>\n            </div>\n            \n            <div className='action-bar'>\n                {!isRecording ? (\n                    <button\n                        className='record-button'\n                        onClick={handleStartRecording}\n                        disabled={recognitionStatus === 'processing'}\n                    >\n                        <div className='button-inner'></div>\n                    </button>\n                ) : (\n                    <button\n                        className='record-button recording-active'\n                        onClick={handleStopRecording}\n                    >\n                        <div className='button-inner'></div>\n                    </button>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default SignLanguageRecognition;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}