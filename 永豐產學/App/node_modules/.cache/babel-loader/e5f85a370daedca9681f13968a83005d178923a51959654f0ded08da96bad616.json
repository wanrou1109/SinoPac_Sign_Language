{"ast":null,"code":"var _jsxFileName = \"/Users/linwanjou/Documents/GitHub/SinoPac_Sign_Language/\\u6C38\\u8C50\\u7522\\u5B78/App/src/components/SignLanguageRecognition.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as handsModule from \"@mediapipe/hands\";\nimport { drawConnectors, drawLandmarks } from \"@mediapipe/drawing_utils\";\nimport { Camera } from \"@mediapipe/camera_utils\";\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAppContext } from '../contexts/AppContext.js';\nimport Header from './Header.js';\nimport '../styles/SignLanguageRecognition.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignLanguageRecognition = () => {\n  _s();\n  var _location$state;\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    addMessage,\n    editMessage,\n    setRecognitionStatus,\n    recognitionStatus,\n    setConversations\n  } = useAppContext();\n  const [isRecording, setIsRecording] = useState(false);\n  const [result, setResult] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const recordedChunksRef = useRef([]);\n  const streamRef = useRef(null);\n  const recognitionIntervalRef = useRef(null);\n  const lastRecognizedTextRef = useRef('');\n  const resultBoxRef = useRef(null);\n  const keypointsBuffer = useRef([]);\n  const editMessageID = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.messageID;\n  useEffect(() => {\n    const setupCamera = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        streamRef.current = stream;\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n        // MediaPipe Hands integration\n        const hands = new handsModule.Hands({\n          locateFile: file => `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`\n        });\n        hands.setOptions({\n          maxNumHands: 2,\n          modelComplexity: 1,\n          minDetectionConfidence: 0.7,\n          minTrackingConfidence: 0.5\n        });\n        hands.onResults(results => {\n          const canvasCtx = canvasRef.current.getContext('2d');\n          canvasCtx.clearRect(0, 0, 640, 480);\n          // Draw the video frame onto the canvas first (水平反轉顯示影像)\n          canvasCtx.save();\n          canvasCtx.translate(640, 0);\n          canvasCtx.scale(-1, 1);\n          if (videoRef.current) {\n            canvasCtx.drawImage(videoRef.current, 0, 0, 640, 480);\n          }\n          // 畫手部輔助線與標籤（標籤位置根據鏡像後的方向修正）\n          if (results.multiHandLandmarks) {\n            for (let i = 0; i < results.multiHandLandmarks.length; i++) {\n              var _results$multiHandedn, _results$multiHandedn2;\n              const landmarks = results.multiHandLandmarks[i];\n              let handedness = ((_results$multiHandedn = results.multiHandedness) === null || _results$multiHandedn === void 0 ? void 0 : (_results$multiHandedn2 = _results$multiHandedn[i]) === null || _results$multiHandedn2 === void 0 ? void 0 : _results$multiHandedn2.label) || '';\n              // 水平鏡像 landmarks\n              const flippedLandmarks = landmarks.map(pt => ({\n                ...pt,\n                x: 1.0 - pt.x // 水平反轉座標\n              }));\n              // 使用鏡像後的座標作為標籤位置\n              const cx = flippedLandmarks[0].x * 640;\n              const cy = flippedLandmarks[0].y * 480;\n              drawConnectors(canvasCtx, flippedLandmarks, handsModule.HAND_CONNECTIONS, {\n                color: '#00FF00',\n                lineWidth: 2\n              });\n              drawLandmarks(canvasCtx, flippedLandmarks, {\n                color: '#FF0000',\n                lineWidth: 1\n              });\n              canvasCtx.font = \"16px Arial\";\n              canvasCtx.fillStyle = \"blue\";\n              // Flip text horizontally back to normal\n              canvasCtx.save();\n              canvasCtx.scale(-1, 1);\n              canvasCtx.fillText(handedness, -cx, cy - 10);\n              canvasCtx.restore();\n              // canvasCtx.fillText(handedness, cx, cy - 10);\n            }\n          }\n          canvasCtx.restore();\n          if (results.multiHandLandmarks && results.multiHandLandmarks.length > 0) {\n            let leftHand = null;\n            let rightHand = null;\n            for (let i = 0; i < results.multiHandLandmarks.length; i++) {\n              var _results$multiHandedn3, _results$multiHandedn4;\n              const handLabel = (_results$multiHandedn3 = results.multiHandedness) === null || _results$multiHandedn3 === void 0 ? void 0 : (_results$multiHandedn4 = _results$multiHandedn3[i]) === null || _results$multiHandedn4 === void 0 ? void 0 : _results$multiHandedn4.label;\n              if (handLabel === 'Left') {\n                leftHand = results.multiHandLandmarks[i];\n              } else if (handLabel === 'Right') {\n                rightHand = results.multiHandLandmarks[i];\n              }\n            }\n            const leftFlat = leftHand ? leftHand.flatMap(pt => [pt.x, pt.y, pt.z]) : new Array(63).fill(0);\n            const rightFlat = rightHand ? rightHand.flatMap(pt => [pt.x, pt.y, pt.z]) : new Array(63).fill(0);\n            const combined = [...leftFlat, ...rightFlat]; // 每幀為 126 維\n\n            keypointsBuffer.current.push(combined);\n            if (keypointsBuffer.current.length > 30) {\n              keypointsBuffer.current.shift();\n            }\n            window.keypointsArray = [...keypointsBuffer.current];\n          } else {\n            keypointsBuffer.current = [];\n            window.keypointsArray = [];\n          }\n        });\n        const camera = new Camera(videoRef.current, {\n          onFrame: async () => {\n            const flippedCanvas = document.createElement('canvas');\n            flippedCanvas.width = 640;\n            flippedCanvas.height = 480;\n            const flippedCtx = flippedCanvas.getContext('2d');\n            flippedCtx.translate(640, 0);\n            flippedCtx.scale(-1, 1);\n            flippedCtx.drawImage(videoRef.current, 0, 0, 640, 480);\n            await hands.send({\n              image: flippedCanvas\n            });\n          },\n          width: 640,\n          height: 480\n        });\n        camera.start();\n      } catch (error) {\n        console.error('鏡頭開啟失敗:', error);\n        alert('無法開啟鏡頭，請確認已授予攝影機權限。');\n      }\n    };\n    setupCamera();\n    return () => {\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (recognitionIntervalRef.current) {\n        clearInterval(recognitionIntervalRef.current);\n        recognitionIntervalRef.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    console.log('開始測試與後端的連接...');\n    fetch('/api/test').then(response => {\n      if (!response.ok) {\n        throw new Error(`後端錯誤：${response.status}`);\n      }\n      return response.json();\n    }).then(data => console.log('後端連接測試成功:', data)).catch(error => console.error('後端連接錯誤:', error));\n  }, []);\n\n  // 即時辨識\n  const startPeriodicRecognition = () => {\n    recognitionIntervalRef.current = setInterval(() => {\n      if (!isProcessing) {\n        captureAndRecognize();\n      }\n    }, 1000);\n  };\n  const captureAndRecognize = async () => {\n    if (!videoRef.current || !streamRef.current) return;\n    try {\n      setIsProcessing(true);\n\n      // canvas -> 捕捉當前影片幀\n      const canvas = document.createElement('canvas');\n      const videoElement = videoRef.current;\n      canvas.width = videoElement.videoWidth;\n      canvas.height = videoElement.videoHeight;\n\n      // 影片幀繪製到 canvas\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n      // 傳送到後端，延遲 0 毫秒\n      setTimeout(() => {\n        sendFrameToRecognition();\n      }, 0);\n    } catch (err) {\n      console.error('處理影片幀時發生錯誤：', err);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const sendFrameToRecognition = async () => {\n    try {\n      const keypointsArray = window.keypointsArray;\n      if (!keypointsArray || keypointsArray.length !== 30) {\n        throw new Error('keypointsArray 資料不足，需 30 幀');\n      }\n      const totalLength = keypointsArray.reduce((sum, row) => sum + row.length, 0);\n      if (totalLength !== 30 * 126) {\n        throw new Error(`格式錯誤，應為 (30, 126)，目前為 (30, ${totalLength / 30})`);\n      }\n      console.log('發送節點資料進行辨識...');\n      const response = await fetch('/api/sign-language-recognition/frame', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          keypoints: keypointsArray\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`伺服器錯誤： ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('辨識結果：', data);\n      if (data.success && data.text) {\n        // 前端顯示邏輯與後端一致，避免重複顯示非數字詞\n        if (data.text === '輸入完成' && data.raw_label) {\n          setResult(prev => prev + '\\n' + data.raw_label);\n        } else {\n          // 若為數字或與上一個不同才加入\n          const isDigit = /^\\d$/.test(data.text);\n          if (isDigit || data.text !== lastRecognizedTextRef.current) {\n            lastRecognizedTextRef.current = data.text;\n            setResult(prev => prev + data.text);\n          }\n        }\n      }\n    } catch (err) {\n      console.error('發送節點到後端時發生錯誤：', err);\n    }\n  };\n  const updateRecognizedText = newText => {\n    if (!newText || newText.trim() === '') return;\n    setResult(prevText => {\n      const lastText = lastRecognizedTextRef.current;\n      if (newText === \"請打下一個字\") {\n        return prevText + '\\n請打下一個字';\n      }\n      if (newText === lastText) {\n        return prevText;\n      }\n      return prevText + newText;\n    });\n  };\n  const handleStartRecording = () => {\n    if (!streamRef.current) {\n      alert('鏡頭尚未準備就緒');\n      return;\n    }\n    setResult('');\n    lastRecognizedTextRef.current = '';\n    recordedChunksRef.current = [];\n    const mediaRecorder = new MediaRecorder(streamRef.current, {\n      mimeType: 'video/webm'\n    });\n    mediaRecorder.ondataavailable = event => {\n      if (event.data.size > 0) {\n        recordedChunksRef.current.push(event.data);\n        console.log(`收到錄製片段: ${event.data.size} bytes`);\n      }\n    };\n    mediaRecorder.onstop = async () => {\n      if (recognitionIntervalRef.current) {\n        clearInterval(recognitionIntervalRef.current);\n        recognitionIntervalRef.current = null;\n      }\n      try {\n        const blob = new Blob(recordedChunksRef.current, {\n          type: 'video/webm'\n        });\n        if (blob.size === 0) throw new Error('視訊檔案為空');\n        // await uploadVideoToServer(blob); // 上傳完整影片\n\n        setTimeout(() => {\n          setRecognitionStatus('idle');\n          if (editMessageID) {\n            editMessage(editMessageID, result);\n          } else {\n            addMessage(result, 'customer');\n          }\n          navigate('/conversation');\n        }, 1000);\n      } catch (err) {\n        console.error('處理錄製錯誤:', err);\n        alert('辨識失敗: ' + err.message);\n        setRecognitionStatus('idle');\n      }\n    };\n    mediaRecorderRef.current = mediaRecorder;\n    mediaRecorder.start(1000);\n    setIsRecording(true);\n    setRecognitionStatus('recording');\n    startPeriodicRecognition();\n  };\n  const handleStopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n    }\n    if (recognitionIntervalRef.current) {\n      clearInterval(recognitionIntervalRef.current);\n      recognitionIntervalRef.current = null;\n    }\n    setIsRecording(false);\n    setRecognitionStatus('processing');\n  };\n\n  // 整段影片上傳後端功能\n  /**\n  const uploadVideoToServer = async (videoBlob) => {\n      const formData = new FormData();\n      formData.append('video', videoBlob, 'sign-language-recording.webm');\n       console.log('開始上傳視訊檔案到 /api/upload/video');\n      const response = await fetch('http://localhost:5000/api/upload/video', {\n          method: 'POST',\n          body: formData,\n          mode: 'cors',\n      });\n       if (!response.ok) {\n          const text = await response.text();\n          throw new Error(`上傳失敗: ${text}`);\n      }\n       const data = await response.json();\n      console.log('上傳成功:', data);\n       await analyzeLatestVideo();\n      return data;\n  };\n  */\n\n  const analyzeLatestVideo = async () => {\n    try {\n      setTimeout(async () => {\n        try {\n          console.log('呼叫 /api/analyze_latest 進行辨識...');\n          const response = await fetch('/api/analyze_latest');\n          if (!response.ok) {\n            throw new Error(`網路回應不正常: ${response.status}`);\n          }\n          const data = await response.json();\n          console.log('手語辨識結果：', data);\n          if (data.result && data.result.length > 0) {\n            var _location$state2;\n            const recognizedText = data.result.join(' ');\n            // setResult(recognizedText);\n            const messageID = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.messageID;\n            if (messageID) {\n              editMessage(messageID, recognizedText);\n            } else {\n              const newMessage = {\n                id: Date.now.toString(),\n                text: recognizedText,\n                sender: 'customer',\n                timestamp: new Date().toString()\n              };\n              setConversations(prev => [...prev, newMessage]);\n            }\n            navigate('/conversation');\n          } else {\n            setResult('無法辨識手語內容');\n          }\n        } catch (error) {\n          console.error('辨識結果時發生錯誤：', error);\n          setResult('辨識過程發生錯誤，請重試');\n        }\n      }, 1000);\n    } catch (e) {\n      console.error('analyzeLatestVideo error:', e);\n    }\n  };\n  const handleBack = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n    }\n    if (recognitionIntervalRef.current) {\n      clearInterval(recognitionIntervalRef.current);\n      recognitionIntervalRef.current = null;\n    }\n    setIsRecording(false);\n    setRecognitionStatus('idle');\n    navigate('/conversation');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sign-language-recognition-screen\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      showBackButton: true,\n      onBack: handleBack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recognition-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        autoPlay: true,\n        playsInline: true,\n        muted: true,\n        style: {\n          display: 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"overlay-canvas\",\n        width: 640,\n        height: 480\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 17\n      }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"processing-indicator\",\n        children: \"\\u8FA8\\u8B58\\u4E2D...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `recognition-result ${isRecording ? 'visible' : 'hidden'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u5373\\u6642\\u8FA8\\u8B58\\u7D50\\u679C\\uFF1A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: resultBoxRef,\n        className: `result-text ${result ? 'has-content' : ''}`,\n        children: result ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"recognized-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"prompt\",\n            children: \"\\u8ACB\\u6253\\u4E0B\\u4E00\\u500B\\u5B57\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u76EE\\u524D\\u5DF2\\u8F38\\u5165\\uFF1A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 34\n            }, this), \" \", result.replace(/請打下一個字/g, '').trim()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 25\n        }, this) : '等待手語辨識...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 17\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"live-indicator\",\n        children: \"\\u5373\\u6642\\u66F4\\u65B0\\u4E2D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-bar\",\n      children: !isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"record-button\",\n        onClick: handleStartRecording,\n        disabled: recognitionStatus === 'processing',\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-inner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"record-button recording-active\",\n        onClick: handleStopRecording,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-inner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 9\n  }, this);\n};\n_s(SignLanguageRecognition, \"CuvadmqeFvakYoPZ22pRXa+xrAk=\", false, function () {\n  return [useNavigate, useLocation, useAppContext];\n});\n_c = SignLanguageRecognition;\nexport default SignLanguageRecognition;\nvar _c;\n$RefreshReg$(_c, \"SignLanguageRecognition\");","map":{"version":3,"names":["React","useState","useEffect","useRef","handsModule","drawConnectors","drawLandmarks","Camera","useNavigate","useLocation","useAppContext","Header","jsxDEV","_jsxDEV","SignLanguageRecognition","_s","_location$state","navigate","location","addMessage","editMessage","setRecognitionStatus","recognitionStatus","setConversations","isRecording","setIsRecording","result","setResult","isProcessing","setIsProcessing","videoRef","canvasRef","mediaRecorderRef","recordedChunksRef","streamRef","recognitionIntervalRef","lastRecognizedTextRef","resultBoxRef","keypointsBuffer","editMessageID","state","messageID","setupCamera","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","hands","Hands","locateFile","file","setOptions","maxNumHands","modelComplexity","minDetectionConfidence","minTrackingConfidence","onResults","results","canvasCtx","getContext","clearRect","save","translate","scale","drawImage","multiHandLandmarks","i","length","_results$multiHandedn","_results$multiHandedn2","landmarks","handedness","multiHandedness","label","flippedLandmarks","map","pt","x","cx","cy","y","HAND_CONNECTIONS","color","lineWidth","font","fillStyle","fillText","restore","leftHand","rightHand","_results$multiHandedn3","_results$multiHandedn4","handLabel","leftFlat","flatMap","z","Array","fill","rightFlat","combined","push","shift","window","keypointsArray","camera","onFrame","flippedCanvas","document","createElement","width","height","flippedCtx","send","image","start","error","console","alert","getTracks","forEach","track","stop","clearInterval","log","fetch","then","response","ok","Error","status","json","data","catch","startPeriodicRecognition","setInterval","captureAndRecognize","canvas","videoElement","videoWidth","videoHeight","ctx","setTimeout","sendFrameToRecognition","err","totalLength","reduce","sum","row","method","headers","body","JSON","stringify","keypoints","success","text","raw_label","prev","isDigit","test","updateRecognizedText","newText","trim","prevText","lastText","handleStartRecording","mediaRecorder","MediaRecorder","mimeType","ondataavailable","event","size","onstop","blob","Blob","type","message","handleStopRecording","analyzeLatestVideo","_location$state2","recognizedText","join","newMessage","id","Date","now","toString","sender","timestamp","e","handleBack","className","children","showBackButton","onBack","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","muted","style","display","replace","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/linwanjou/Documents/GitHub/SinoPac_Sign_Language/永豐產學/App/src/components/SignLanguageRecognition.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport * as handsModule from \"@mediapipe/hands\";\nimport { drawConnectors, drawLandmarks } from \"@mediapipe/drawing_utils\";\nimport { Camera } from \"@mediapipe/camera_utils\";\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAppContext } from '../contexts/AppContext.js';\nimport Header from './Header.js';\nimport '../styles/SignLanguageRecognition.css';\n\nconst SignLanguageRecognition = () => {\n    const navigate = useNavigate();\n    const location = useLocation();\n    const { addMessage, editMessage, setRecognitionStatus, recognitionStatus, setConversations } = useAppContext();\n    const [ isRecording, setIsRecording ] = useState(false);\n    const [ result, setResult ] = useState('');\n    const [ isProcessing, setIsProcessing ] = useState(false);\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null);\n    const mediaRecorderRef = useRef(null);\n    const recordedChunksRef = useRef([]);\n    const streamRef = useRef(null);\n    const recognitionIntervalRef = useRef(null);\n    const lastRecognizedTextRef = useRef('');\n    const resultBoxRef = useRef(null);\n    const keypointsBuffer = useRef([]);\n    const editMessageID = location.state?.messageID;\n    \n    useEffect(() => {\n        const setupCamera = async () => {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n                streamRef.current = stream;\n                if (videoRef.current) {\n                    videoRef.current.srcObject = stream;\n                }\n                // MediaPipe Hands integration\n                const hands = new handsModule.Hands({\n                    locateFile: (file) =>\n                        `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`,\n                });\n\n                hands.setOptions({\n                    maxNumHands: 2,\n                    modelComplexity: 1,\n                    minDetectionConfidence: 0.7,\n                    minTrackingConfidence: 0.5,\n                });\n                hands.onResults((results) => {\n                    const canvasCtx = canvasRef.current.getContext('2d');\n                    canvasCtx.clearRect(0, 0, 640, 480);\n                    // Draw the video frame onto the canvas first (水平反轉顯示影像)\n                    canvasCtx.save();\n                    canvasCtx.translate(640, 0);\n                    canvasCtx.scale(-1, 1);\n                    if (videoRef.current) {\n                        canvasCtx.drawImage(videoRef.current, 0, 0, 640, 480);\n                    }\n                    // 畫手部輔助線與標籤（標籤位置根據鏡像後的方向修正）\n                    if (results.multiHandLandmarks) {\n                        for (let i = 0; i < results.multiHandLandmarks.length; i++) {\n                            const landmarks = results.multiHandLandmarks[i];\n                            let handedness = results.multiHandedness?.[i]?.label || '';\n                            // 水平鏡像 landmarks\n                            const flippedLandmarks = landmarks.map(pt => ({\n                                ...pt,\n                                x: 1.0 - pt.x // 水平反轉座標\n                            }));\n                            // 使用鏡像後的座標作為標籤位置\n                            const cx = flippedLandmarks[0].x * 640;\n                            const cy = flippedLandmarks[0].y * 480;\n\n                            drawConnectors(canvasCtx, flippedLandmarks, handsModule.HAND_CONNECTIONS, { color: '#00FF00', lineWidth: 2 });\n                                                        drawLandmarks(canvasCtx, flippedLandmarks, { color: '#FF0000', lineWidth: 1 });\n\n                            canvasCtx.font = \"16px Arial\";\n                            canvasCtx.fillStyle = \"blue\";\n                            // Flip text horizontally back to normal\n                            canvasCtx.save();\n                            canvasCtx.scale(-1, 1);\n                            canvasCtx.fillText(handedness, -cx, cy - 10);\n                            canvasCtx.restore();\n                            // canvasCtx.fillText(handedness, cx, cy - 10);\n                        }\n                    }\n                    canvasCtx.restore();\n\n                    if (results.multiHandLandmarks && results.multiHandLandmarks.length > 0) {\n                        let leftHand = null;\n                        let rightHand = null;\n\n                        for (let i = 0; i < results.multiHandLandmarks.length; i++) {\n                            const handLabel = results.multiHandedness?.[i]?.label;\n                            if (handLabel === 'Left') {\n                                leftHand = results.multiHandLandmarks[i];\n                            } else if (handLabel === 'Right') {\n                                rightHand = results.multiHandLandmarks[i];\n                            }\n                        }\n                        const leftFlat = leftHand ? leftHand.flatMap(pt => [pt.x, pt.y, pt.z]) : new Array(63).fill(0);\n                        const rightFlat = rightHand ? rightHand.flatMap(pt => [pt.x, pt.y, pt.z]) : new Array(63).fill(0);\n\n                        const combined = [...leftFlat, ...rightFlat]; // 每幀為 126 維\n\n                        keypointsBuffer.current.push(combined);\n                        if (keypointsBuffer.current.length > 30) {\n                            keypointsBuffer.current.shift();\n                        }\n\n                        window.keypointsArray = [...keypointsBuffer.current];\n                    } else {\n                        keypointsBuffer.current = [];\n                        window.keypointsArray = [];\n                    }\n                });\n\n                const camera = new Camera(videoRef.current, {\n                    onFrame: async () => {\n                        const flippedCanvas = document.createElement('canvas');\n                        flippedCanvas.width = 640;\n                        flippedCanvas.height = 480;\n                        const flippedCtx = flippedCanvas.getContext('2d');\n                        flippedCtx.translate(640, 0);\n                        flippedCtx.scale(-1, 1);\n                        flippedCtx.drawImage(videoRef.current, 0, 0, 640, 480);\n                        await hands.send({ image: flippedCanvas });\n                    },\n                    width: 640,\n                    height: 480,\n                });\n                camera.start();\n            } catch (error) {\n                console.error('鏡頭開啟失敗:', error);\n                alert('無法開啟鏡頭，請確認已授予攝影機權限。');\n            }\n        };\n\n        setupCamera();\n\n        return () => {\n            if (streamRef.current) {\n                streamRef.current.getTracks().forEach(track => track.stop());\n            }\n\n            if (recognitionIntervalRef.current) {\n                clearInterval(recognitionIntervalRef.current);\n                recognitionIntervalRef.current = null;\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        console.log('開始測試與後端的連接...');\n        fetch('/api/test')\n        .then(response => {\n            if (!response.ok) {\n            throw new Error(`後端錯誤：${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => console.log('後端連接測試成功:', data))\n        .catch(error => console.error('後端連接錯誤:', error));\n    }, []);\n\n    // 即時辨識\n    const startPeriodicRecognition = () => {\n        recognitionIntervalRef.current = setInterval(() => {\n            if (!isProcessing) {\n                captureAndRecognize();\n            }\n        }, 1000);\n     };\n\n    const captureAndRecognize = async () => {\n         if (!videoRef.current || !streamRef.current) return;\n\n        try {\n            setIsProcessing(true);\n\n            // canvas -> 捕捉當前影片幀\n            const canvas = document.createElement('canvas');\n            const videoElement = videoRef.current;\n\n            canvas.width = videoElement.videoWidth;\n            canvas.height = videoElement.videoHeight;\n\n            // 影片幀繪製到 canvas\n            const ctx = canvas.getContext('2d');\n            ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n            // 傳送到後端，延遲 0 毫秒\n            setTimeout(() => {\n                sendFrameToRecognition();\n            }, 0);\n        } catch (err) {\n            console.error('處理影片幀時發生錯誤：', err);\n        } finally {\n            setIsProcessing(false);\n        }\n    };\n\n    const sendFrameToRecognition = async () => {\n        try {\n            const keypointsArray = window.keypointsArray;\n            if (!keypointsArray || keypointsArray.length !== 30) {\n                throw new Error('keypointsArray 資料不足，需 30 幀');\n            }\n\n            const totalLength = keypointsArray.reduce((sum, row) => sum + row.length, 0);\n            if (totalLength !== 30 * 126) {\n                throw new Error(`格式錯誤，應為 (30, 126)，目前為 (30, ${totalLength / 30})`);\n            }\n            console.log('發送節點資料進行辨識...');\n            const response = await fetch('/api/sign-language-recognition/frame', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ keypoints: keypointsArray })\n            });\n            if (!response.ok) {\n                throw new Error(`伺服器錯誤： ${response.status}`);\n            }\n\n            const data = await response.json();\n            console.log('辨識結果：', data);\n\n            if (data.success && data.text) {\n                // 前端顯示邏輯與後端一致，避免重複顯示非數字詞\n                if (data.text === '輸入完成' && data.raw_label) {\n                    setResult(prev => prev + '\\n' + data.raw_label);\n                } else {\n                    // 若為數字或與上一個不同才加入\n                    const isDigit = /^\\d$/.test(data.text);\n                    if (isDigit || data.text !== lastRecognizedTextRef.current) {\n                        lastRecognizedTextRef.current = data.text;\n                        setResult(prev => prev + data.text);\n                    }\n                }\n            }\n        } catch (err) {\n             console.error('發送節點到後端時發生錯誤：', err);\n        }\n    };\n\n    const updateRecognizedText = (newText) => {\n        if (!newText || newText.trim() === '') return;\n        setResult(prevText => {\n            const lastText = lastRecognizedTextRef.current;\n            if (newText === \"請打下一個字\") {\n                return prevText + '\\n請打下一個字';\n            }\n            if (newText === lastText) {\n                return prevText;\n            }\n             return prevText + newText;\n        });\n    };\n\n    const handleStartRecording = () => {\n        if (!streamRef.current) {\n            alert('鏡頭尚未準備就緒');\n            return;\n        }\n\n        setResult('');\n        lastRecognizedTextRef.current = '';\n        recordedChunksRef.current = [];\n\n        const mediaRecorder = new MediaRecorder(streamRef.current, { mimeType: 'video/webm' });\n\n        mediaRecorder.ondataavailable = event => {\n            if (event.data.size > 0) {\n                recordedChunksRef.current.push(event.data);\n                console.log(`收到錄製片段: ${event.data.size} bytes`);\n            }\n        };\n\n        mediaRecorder.onstop = async () => {\n            if (recognitionIntervalRef.current) {\n                clearInterval(recognitionIntervalRef.current);\n                recognitionIntervalRef.current = null;\n            }\n            try {\n                const blob = new Blob(recordedChunksRef.current, { type: 'video/webm' });\n                if (blob.size === 0) throw new Error('視訊檔案為空');\n                // await uploadVideoToServer(blob); // 上傳完整影片\n\n                setTimeout(() => {\n                    setRecognitionStatus('idle');\n                    if (editMessageID) {\n                        editMessage(editMessageID, result);\n                    } else {\n                        addMessage(result, 'customer');\n                    }\n                    navigate('/conversation');\n                }, 1000);\n            } catch (err) {\n                console.error('處理錄製錯誤:', err);\n                alert('辨識失敗: ' + err.message);\n                setRecognitionStatus('idle');\n            }\n        };\n\n        mediaRecorderRef.current = mediaRecorder;\n        mediaRecorder.start(1000);\n        setIsRecording(true);\n        setRecognitionStatus('recording');\n        startPeriodicRecognition();\n    };\n\n    const handleStopRecording = () => {\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n            mediaRecorderRef.current.stop();\n        }\n\n        if (recognitionIntervalRef.current) {\n            clearInterval(recognitionIntervalRef.current);\n            recognitionIntervalRef.current = null;\n        }\n\n        setIsRecording(false);\n        setRecognitionStatus('processing');\n    };\n\n    // 整段影片上傳後端功能\n    /**\n    const uploadVideoToServer = async (videoBlob) => {\n        const formData = new FormData();\n        formData.append('video', videoBlob, 'sign-language-recording.webm');\n\n        console.log('開始上傳視訊檔案到 /api/upload/video');\n        const response = await fetch('http://localhost:5000/api/upload/video', {\n            method: 'POST',\n            body: formData,\n            mode: 'cors',\n        });\n\n        if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`上傳失敗: ${text}`);\n        }\n\n        const data = await response.json();\n        console.log('上傳成功:', data);\n\n        await analyzeLatestVideo();\n        return data;\n    };\n    */\n\n    const analyzeLatestVideo = async () => {\n        try {\n            setTimeout(async () => {\n                try {\n                    console.log('呼叫 /api/analyze_latest 進行辨識...');\n                    const response = await fetch('/api/analyze_latest');\n                    if (!response.ok) {\n                        throw new Error(`網路回應不正常: ${response.status}`);\n                    }\n                    const data = await response.json();\n                    console.log('手語辨識結果：', data);\n                    if (data.result && data.result.length > 0) {\n                        const recognizedText = data.result.join(' ');\n                        // setResult(recognizedText);\n                        const messageID = location.state?.messageID;\n                        if (messageID) {\n                            editMessage(messageID, recognizedText);\n                        } else {\n                            const newMessage = {\n                                id: Date.now.toString(),\n                                text: recognizedText,\n                                sender: 'customer',\n                                timestamp: new Date().toString() \n                            };\n                            setConversations(prev => [...prev, newMessage]);\n                        }\n                        navigate('/conversation');\n                    } else {\n                        setResult('無法辨識手語內容');\n                    }\n                } catch (error) {\n                    console.error('辨識結果時發生錯誤：', error);\n                    setResult('辨識過程發生錯誤，請重試');\n                }\n            }, 1000);\n        } catch (e) {\n            console.error('analyzeLatestVideo error:', e);\n        }\n    };\n\n    const handleBack = () => {\n        if (mediaRecorderRef.current && isRecording) {\n            mediaRecorderRef.current.stop();\n        }\n\n        if (recognitionIntervalRef.current) {\n            clearInterval(recognitionIntervalRef.current);\n            recognitionIntervalRef.current = null;\n        }\n        \n        setIsRecording(false);\n        setRecognitionStatus('idle');\n        navigate('/conversation');\n    };\n\n    return (\n        <div className='sign-language-recognition-screen'>\n            <Header showBackButton={true} onBack={handleBack}/>\n            <div className='recognition-container'>\n                <div className='video-container'></div>\n                <video\n                    ref={videoRef}\n                    autoPlay\n                    playsInline\n                    muted\n                    style={{ display: 'none' }}\n                />\n                <canvas\n                    ref={canvasRef}\n                    className=\"overlay-canvas\"\n                    width={640}\n                    height={480}\n                />\n                {isProcessing && (\n                    <div className='processing-indicator'>\n                        辨識中...\n                    </div>\n                )}\n            </div>\n            <div className={`recognition-result ${isRecording ? 'visible' : 'hidden'}`}>\n                <h3>即時辨識結果：</h3>\n                <div\n                    ref={resultBoxRef}\n                    className={`result-text ${result ? 'has-content' : ''}`}\n                >\n                    {result ? (\n                        <div className=\"recognized-summary\">\n                            <div className=\"prompt\">請打下一個字</div>\n                            <div><strong>目前已輸入：</strong> {result.replace(/請打下一個字/g, '').trim()}</div>\n                        </div>\n                    ) : '等待手語辨識...'}\n                </div>\n                {isRecording && <div className=\"live-indicator\">即時更新中</div>}\n            </div>\n            <div className='action-bar'>\n                {!isRecording ? (\n                    <button\n                        className='record-button'\n                        onClick={handleStartRecording}\n                        disabled={recognitionStatus === 'processing'}\n                    >\n                        <div className='button-inner'></div>\n                    </button>\n                ) : (\n                    <button\n                        className='record-button recording-active'\n                        onClick={handleStopRecording}\n                    >\n                        <div className='button-inner'></div>\n                    </button>\n                )}\n            </div>\n        </div>\n    );\n};\n                \nexport default SignLanguageRecognition;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}