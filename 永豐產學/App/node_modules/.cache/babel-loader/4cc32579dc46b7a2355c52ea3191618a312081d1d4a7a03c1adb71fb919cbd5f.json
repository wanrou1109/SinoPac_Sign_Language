{"ast":null,"code":"/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @api private\n */\nvar {\n  METHODS\n} = require('node:http');\nvar contentType = require('content-type');\nvar etag = require('etag');\nvar mime = require('mime-types');\nvar proxyaddr = require('proxy-addr');\nvar qs = require('qs');\nvar querystring = require('querystring');\n\n/**\n * A list of lowercased HTTP methods that are supported by Node.js.\n * @api private\n */\nexports.methods = METHODS.map(method => method.toLowerCase());\n\n/**\n * Return strong ETag for `body`.\n *\n * @param {String|Buffer} body\n * @param {String} [encoding]\n * @return {String}\n * @api private\n */\n\nexports.etag = createETagGenerator({\n  weak: false\n});\n\n/**\n * Return weak ETag for `body`.\n *\n * @param {String|Buffer} body\n * @param {String} [encoding]\n * @return {String}\n * @api private\n */\n\nexports.wetag = createETagGenerator({\n  weak: true\n});\n\n/**\n * Normalize the given `type`, for example \"html\" becomes \"text/html\".\n *\n * @param {String} type\n * @return {Object}\n * @api private\n */\n\nexports.normalizeType = function (type) {\n  return ~type.indexOf('/') ? acceptParams(type) : {\n    value: mime.lookup(type) || 'application/octet-stream',\n    params: {}\n  };\n};\n\n/**\n * Normalize `types`, for example \"html\" becomes \"text/html\".\n *\n * @param {Array} types\n * @return {Array}\n * @api private\n */\n\nexports.normalizeTypes = function (types) {\n  return types.map(exports.normalizeType);\n};\n\n/**\n * Parse accept params `str` returning an\n * object with `.value`, `.quality` and `.params`.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction acceptParams(str) {\n  var length = str.length;\n  var colonIndex = str.indexOf(';');\n  var index = colonIndex === -1 ? length : colonIndex;\n  var ret = {\n    value: str.slice(0, index).trim(),\n    quality: 1,\n    params: {}\n  };\n  while (index < length) {\n    var splitIndex = str.indexOf('=', index);\n    if (splitIndex === -1) break;\n    var colonIndex = str.indexOf(';', index);\n    var endIndex = colonIndex === -1 ? length : colonIndex;\n    if (splitIndex > endIndex) {\n      index = str.lastIndexOf(';', splitIndex - 1) + 1;\n      continue;\n    }\n    var key = str.slice(index, splitIndex).trim();\n    var value = str.slice(splitIndex + 1, endIndex).trim();\n    if (key === 'q') {\n      ret.quality = parseFloat(value);\n    } else {\n      ret.params[key] = value;\n    }\n    index = endIndex + 1;\n  }\n  return ret;\n}\n\n/**\n * Compile \"etag\" value to function.\n *\n * @param  {Boolean|String|Function} val\n * @return {Function}\n * @api private\n */\n\nexports.compileETag = function (val) {\n  var fn;\n  if (typeof val === 'function') {\n    return val;\n  }\n  switch (val) {\n    case true:\n    case 'weak':\n      fn = exports.wetag;\n      break;\n    case false:\n      break;\n    case 'strong':\n      fn = exports.etag;\n      break;\n    default:\n      throw new TypeError('unknown value for etag function: ' + val);\n  }\n  return fn;\n};\n\n/**\n * Compile \"query parser\" value to function.\n *\n * @param  {String|Function} val\n * @return {Function}\n * @api private\n */\n\nexports.compileQueryParser = function compileQueryParser(val) {\n  var fn;\n  if (typeof val === 'function') {\n    return val;\n  }\n  switch (val) {\n    case true:\n    case 'simple':\n      fn = querystring.parse;\n      break;\n    case false:\n      break;\n    case 'extended':\n      fn = parseExtendedQueryString;\n      break;\n    default:\n      throw new TypeError('unknown value for query parser function: ' + val);\n  }\n  return fn;\n};\n\n/**\n * Compile \"proxy trust\" value to function.\n *\n * @param  {Boolean|String|Number|Array|Function} val\n * @return {Function}\n * @api private\n */\n\nexports.compileTrust = function (val) {\n  if (typeof val === 'function') return val;\n  if (val === true) {\n    // Support plain true/false\n    return function () {\n      return true;\n    };\n  }\n  if (typeof val === 'number') {\n    // Support trusting hop count\n    return function (a, i) {\n      return i < val;\n    };\n  }\n  if (typeof val === 'string') {\n    // Support comma-separated values\n    val = val.split(',').map(function (v) {\n      return v.trim();\n    });\n  }\n  return proxyaddr.compile(val || []);\n};\n\n/**\n * Set the charset in a given Content-Type string.\n *\n * @param {String} type\n * @param {String} charset\n * @return {String}\n * @api private\n */\n\nexports.setCharset = function setCharset(type, charset) {\n  if (!type || !charset) {\n    return type;\n  }\n\n  // parse type\n  var parsed = contentType.parse(type);\n\n  // set charset\n  parsed.parameters.charset = charset;\n\n  // format type\n  return contentType.format(parsed);\n};\n\n/**\n * Create an ETag generator function, generating ETags with\n * the given options.\n *\n * @param {object} options\n * @return {function}\n * @private\n */\n\nfunction createETagGenerator(options) {\n  return function generateETag(body, encoding) {\n    var buf = !Buffer.isBuffer(body) ? Buffer.from(body, encoding) : body;\n    return etag(buf, options);\n  };\n}\n\n/**\n * Parse an extended query string with qs.\n *\n * @param {String} str\n * @return {Object}\n * @private\n */\n\nfunction parseExtendedQueryString(str) {\n  return qs.parse(str, {\n    allowPrototypes: true\n  });\n}","map":{"version":3,"names":["METHODS","require","contentType","etag","mime","proxyaddr","qs","querystring","exports","methods","map","method","toLowerCase","createETagGenerator","weak","wetag","normalizeType","type","indexOf","acceptParams","value","lookup","params","normalizeTypes","types","str","length","colonIndex","index","ret","slice","trim","quality","splitIndex","endIndex","lastIndexOf","key","parseFloat","compileETag","val","fn","TypeError","compileQueryParser","parse","parseExtendedQueryString","compileTrust","a","i","split","v","compile","setCharset","charset","parsed","parameters","format","options","generateETag","body","encoding","buf","Buffer","isBuffer","from","allowPrototypes"],"sources":["/Users/linwanjou/Documents/GitHub/SinoPac_Sign_Language/永豐產學/App/node_modules/express/lib/utils.js"],"sourcesContent":["/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @api private\n */\n\nvar { METHODS } = require('node:http');\nvar contentType = require('content-type');\nvar etag = require('etag');\nvar mime = require('mime-types')\nvar proxyaddr = require('proxy-addr');\nvar qs = require('qs');\nvar querystring = require('querystring');\n\n/**\n * A list of lowercased HTTP methods that are supported by Node.js.\n * @api private\n */\nexports.methods = METHODS.map((method) => method.toLowerCase());\n\n/**\n * Return strong ETag for `body`.\n *\n * @param {String|Buffer} body\n * @param {String} [encoding]\n * @return {String}\n * @api private\n */\n\nexports.etag = createETagGenerator({ weak: false })\n\n/**\n * Return weak ETag for `body`.\n *\n * @param {String|Buffer} body\n * @param {String} [encoding]\n * @return {String}\n * @api private\n */\n\nexports.wetag = createETagGenerator({ weak: true })\n\n/**\n * Normalize the given `type`, for example \"html\" becomes \"text/html\".\n *\n * @param {String} type\n * @return {Object}\n * @api private\n */\n\nexports.normalizeType = function(type){\n  return ~type.indexOf('/')\n    ? acceptParams(type)\n    : { value: (mime.lookup(type) || 'application/octet-stream'), params: {} }\n};\n\n/**\n * Normalize `types`, for example \"html\" becomes \"text/html\".\n *\n * @param {Array} types\n * @return {Array}\n * @api private\n */\n\nexports.normalizeTypes = function(types) {\n  return types.map(exports.normalizeType);\n};\n\n\n/**\n * Parse accept params `str` returning an\n * object with `.value`, `.quality` and `.params`.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction acceptParams (str) {\n  var length = str.length;\n  var colonIndex = str.indexOf(';');\n  var index = colonIndex === -1 ? length : colonIndex;\n  var ret = { value: str.slice(0, index).trim(), quality: 1, params: {} };\n\n  while (index < length) {\n    var splitIndex = str.indexOf('=', index);\n    if (splitIndex === -1) break;\n\n    var colonIndex = str.indexOf(';', index);\n    var endIndex = colonIndex === -1 ? length : colonIndex;\n\n    if (splitIndex > endIndex) {\n      index = str.lastIndexOf(';', splitIndex - 1) + 1;\n      continue;\n    }\n\n    var key = str.slice(index, splitIndex).trim();\n    var value = str.slice(splitIndex + 1, endIndex).trim();\n\n    if (key === 'q') {\n      ret.quality = parseFloat(value);\n    } else {\n      ret.params[key] = value;\n    }\n\n    index = endIndex + 1;\n  }\n\n  return ret;\n}\n\n/**\n * Compile \"etag\" value to function.\n *\n * @param  {Boolean|String|Function} val\n * @return {Function}\n * @api private\n */\n\nexports.compileETag = function(val) {\n  var fn;\n\n  if (typeof val === 'function') {\n    return val;\n  }\n\n  switch (val) {\n    case true:\n    case 'weak':\n      fn = exports.wetag;\n      break;\n    case false:\n      break;\n    case 'strong':\n      fn = exports.etag;\n      break;\n    default:\n      throw new TypeError('unknown value for etag function: ' + val);\n  }\n\n  return fn;\n}\n\n/**\n * Compile \"query parser\" value to function.\n *\n * @param  {String|Function} val\n * @return {Function}\n * @api private\n */\n\nexports.compileQueryParser = function compileQueryParser(val) {\n  var fn;\n\n  if (typeof val === 'function') {\n    return val;\n  }\n\n  switch (val) {\n    case true:\n    case 'simple':\n      fn = querystring.parse;\n      break;\n    case false:\n      break;\n    case 'extended':\n      fn = parseExtendedQueryString;\n      break;\n    default:\n      throw new TypeError('unknown value for query parser function: ' + val);\n  }\n\n  return fn;\n}\n\n/**\n * Compile \"proxy trust\" value to function.\n *\n * @param  {Boolean|String|Number|Array|Function} val\n * @return {Function}\n * @api private\n */\n\nexports.compileTrust = function(val) {\n  if (typeof val === 'function') return val;\n\n  if (val === true) {\n    // Support plain true/false\n    return function(){ return true };\n  }\n\n  if (typeof val === 'number') {\n    // Support trusting hop count\n    return function(a, i){ return i < val };\n  }\n\n  if (typeof val === 'string') {\n    // Support comma-separated values\n    val = val.split(',')\n      .map(function (v) { return v.trim() })\n  }\n\n  return proxyaddr.compile(val || []);\n}\n\n/**\n * Set the charset in a given Content-Type string.\n *\n * @param {String} type\n * @param {String} charset\n * @return {String}\n * @api private\n */\n\nexports.setCharset = function setCharset(type, charset) {\n  if (!type || !charset) {\n    return type;\n  }\n\n  // parse type\n  var parsed = contentType.parse(type);\n\n  // set charset\n  parsed.parameters.charset = charset;\n\n  // format type\n  return contentType.format(parsed);\n};\n\n/**\n * Create an ETag generator function, generating ETags with\n * the given options.\n *\n * @param {object} options\n * @return {function}\n * @private\n */\n\nfunction createETagGenerator (options) {\n  return function generateETag (body, encoding) {\n    var buf = !Buffer.isBuffer(body)\n      ? Buffer.from(body, encoding)\n      : body\n\n    return etag(buf, options)\n  }\n}\n\n/**\n * Parse an extended query string with qs.\n *\n * @param {String} str\n * @return {Object}\n * @private\n */\n\nfunction parseExtendedQueryString(str) {\n  return qs.parse(str, {\n    allowPrototypes: true\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}